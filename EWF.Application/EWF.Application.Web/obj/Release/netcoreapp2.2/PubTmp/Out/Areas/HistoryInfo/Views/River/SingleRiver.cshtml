@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "单站水情对比";
    var sdate = System.DateTime.Now.AddDays(-30).ToString("yyyy-MM-dd 08:00");
    var edate = System.DateTime.Now.ToString("yyyy-MM-dd 08:00");
    var compareyear = System.DateTime.Now.AddYears(-1).ToString("yyyy");
}

<div class="div_condition" data-options="region:'north',split:false,title:'',border:false" style="height:50px;">
    <table style="height:99%;">
        <tr>
            <td>选择测站:</td>
            <td>
                <input id="areastcd" class="easyui-combogrid" style="width:150px" toolbar="#tb11" />
                <div id="tb11">
                    <input class="easyui-searchbox" style="width:200px;" data-options="prompt:'输入站码或站名简拼',searcher:doSearchSta" />
                </div>
            </td>
            <td>分析时段:</td>
            <td><input id="sdate" class="Wdate" style="width:140px" value="@sdate" onfocus="WdatePicker({dateFmt: 'yyyy-MM-dd HH:mm'})" /></td>
            <td>-</td>
            <td><input id="edate" class="Wdate" style="width:140px" value="@edate" onfocus="WdatePicker({ dateFmt: 'yyyy-MM-dd HH:mm' })" /></td>
            <td>对比年份:</td>
            <td class="date-select year">
                <input type="text" id="compareyear" name="compareyear" class="Wdate" value="@compareyear" onclick="WdatePicker({skin:'whyGreen',dateFmt:'yyyy'})" />
            </td>

            <td align="left">
                <a id="btnSearch" href="#" class="easyui-linkbutton" data-options="iconCls:'icon-search'">查询</a>
                <a id="btnExportRiverData" href="#" class="easyui-linkbutton" data-options="iconCls:'icon-export'">导出</a>

            </td>
        </tr>

    </table>
</div>
<div data-options="region:'west',split:true,title:' ',border:false,onCollapse:LeftCollapse,onExpand:LeftExpand" style="width:450px;">
    <table id="dgGrid" style="height:100%;width:100%;"></table>
</div>
<div id="divC" data-options="region:'center',split:true,title:' ',border:false">
    <div style="width:100%;overflow:hidden;" id="divLineContainer">
        <div id="divLine" style="width:100%;">
        </div>        
    </div>
</div>
@section Scripts{

    <script type="text/javascript">
		var colors = ['#f00', '#00f', '#0d6cba'];
        $(function () {            
            Highcharts.setOptions({
                lang: {
                    months: ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'],
                    weekdays: ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'],
                    downloadJPEG: "导出JPEG图片",
                    downloadPDF: "导出PDF",
                    downloadPNG: "导出PNG图片",
                    downloadSVG: "导出SVG图片",
                    printChart: "打印图表",
                    resetZoom: "重置"
                }
            });
            //初始化条件组件，设置默认值
            InitCondition();


            //绑定查询按钮
            $("#btnSearch").bind("click", function () {
                Search();

            });

        });

       
        //初始化条件
        function InitCondition() {
            //初始化日期默认值
            InitDateCondition();
        }

        //初始化日期控件默认值
        function InitDateCondition() {
            //var curdate = new Date();
            //var newDate = DateAdd("hh", 1, curdate);
            //$("#edate").val(utils.formatDate(newDate, 'yyyy-MM-dd hh:00'));
            //$("#sdate").val(utils.formatDate(DateAdd('d', -7, newDate), 'yyyy-MM-dd hh:00'));
            bindAreaDataGrid();
        }

        //查询数据
        function Search() {
            var stcd = $('#areastcd').combogrid('getValue');
            var stnm = $('#areastcd').combogrid('getText');
            var sdate = $("#sdate").val();
            var edate = $("#edate").val();
			var compareyear = $("#compareyear").val();

            com.ajax({
                type: 'get',
                url: '/HistoryInfo/River/GetDataForSingleRiverCompare/',
                data: { "stcd": stcd, "sdate": sdate, "edate": edate, "compareYear": compareyear },
                success: function (d) {

                    if (d.total > 0) {
                        ShowTable(d, stnm, utils.formatDate(edate, 'yyyy'), compareyear);
                        DrawLine(d, stnm, utils.formatDate(edate, 'yyyy'), compareyear);

                    } else {
                        //ShowTable(d, stnm, com.formatDate(sdate,, compareyear);
                        //DrawLine(d, stnm);

                    }
                }
            });

        }

        function ShowTable(d, stnm, currentYear, compareYear) {

            $('#dgGrid').datagrid({
                title: stnm + "水情历史同期对比",
                striped: true,
                singleSelect: true,
                collapsible: true,
                rownumbers: true,
                nowrap: false,
                remoteSort: false,
                loadMsg: '',
                data: d,
                columns: [[
                    {
                        field: 'TM', title: '时间', width: '15%', align: 'center', rowspan: 2, formatter: function (value) {
                            return utils.formatDate(value, 'MM-dd');
                        }
                    },
                    { title: '水位(m)',  align: 'right', colspan: 2 },
                    { title: '流量(m³/s)',  align: 'right', colspan: 2 },
                    { title: '含沙量(kg/m³)',  align: 'right', colspan: 2 },

                ], [
                        { field: 'CurrentZ', title: currentYear, align: 'center', width: '12%' },
                        { field: 'CompareZ', title: compareYear, align: 'center', width: '12%' },
                        { field: 'CurrentQ', title: currentYear, align: 'center', width: '15%' },
                        { field: 'CompareQ', title: compareYear, align: 'center', width: '15%' },
                        { field: 'CurrentS', title: currentYear, align: 'center', width: '15%' },
                        { field: 'CompareS', title: compareYear, align: 'center', width: '15%' }

                ]],
            });
        }
        //绘制水位蓄量过程线
        function DrawLine(d, title, currentYear, compareYear) {
            var isMinLableShow = false;
            var isMaxLableShow = false;
            var HChart = new Highcharts.Chart('divLine', {
                chart: {
                    zoomType: 'x',
                    marginRight: 100,
                    height: $("#divC").height() - 90
                },
                //colors: colors,
                title: {
                    //text: $('#staList').combogrid('getText') + '水位流量过程'
                    text: title + '水情历史同期对比分析图'//decodeURI($.getUrlParam("stnm")) + '水位流量过程线'
                },
                credits: {
                    enabled: false
                },
                subtitle: {
                    text: $("#sdate").val() + "至" + $("#edate").val()
                },
                plotOptions: {
                    series: {
                        marker: {
                            enabled: false
                        },
                        turboThreshold: 50000//性能阈值，如果传入的数据非[xx,xx]和数字时，会限制渲染默认1000条
                    },
                    line: {
                        cropThreshold: 50000
                    }
                },
                xAxis: {
                    type: "datetime",
                    labels: {
                        formatter: function () {
                            //return Highcharts.dateFormat('%d/%m', this.value);
                            return Highcharts.dateFormat('%m-%d %H', this.value);
                        }
                    },
                    //startOnTick: true,
                    //endOnTick: true,
                    tickPixelInterval: 80,
                    crosshair: {
                        color: 'green'
                    },
                    //min: com.ToUTC($("#sdate").val()),
                    //max: com.ToUTC($("#edate").val()),
                    tickmarkPlacement: 'on'
                },
                yAxis: [{
                    title: {
                        text: '水位(m)'

                    },
                    lineWidth: 2,
                    lineColor: '#000',
                    labels: {
                        formatter: function () {
                            return changevalue(this.value, 2);
                        }
                    }
                },
                {
                    title: {
                        text: '流量(m³/s)'
                    },
                    lineWidth: 2,
                    lineColor: '#000',
                    labels: {
                        formatter: function () {
                            return SaveThreeN(this.value, 3);//Number(this.value).keepValidNum(3);
                        }
                    },
                    opposite: true
                },
                {
                    title: {
                        text: '含沙量(kg/m³)'
                    },
                    lineWidth: 2,
                    lineColor: '#000',
                    labels: {
                        formatter: function () {
                            return SaveThreeN(this.value, 3);//Number(this.value).keepValidNum(3);
                        }
                    },
                    opposite: true
                }
                ],
                tooltip: {
                    valueSuffix: '',
                    headerFormat: '<span style="font-size:16px">{point.key}</span><table>',
                    pointFormat: '<tr><td style="color:{series.color};padding:0" nowrap>{series.name}: </td>' +
                        '<td style="padding:0" nowrap><b>{point.y}</b></td></tr>',
                    footerFormat: '</table>',
                    followPointer: true,
                    shared: true,
                    useHTML: true,
                    xDateFormat: '%m-%d'
                },
                legend: {
                    align: 'center',
                    verticalAlign: 'bottom',
                    borderWidth: 0
                },
                series: GetSearies(d, currentYear, compareYear)
            });
        }

        function GetSearies(d, currentYear, compareYear) {
            var arrSeries = [];
            var objSeriesZ1 = {
                name: currentYear+'-水位',
                color: colors[0],
                data: [],
                lineWidth: 1
            }
            var objSeriesQ1 = {
                name: currentYear +'-流量',
                data: [],
				color: colors[1],
                yAxis: 1,
                visible:false,
                lineWidth: 1
            }
            var objSeriesS1 = {
                name: currentYear + '-含沙量',
                data: [],
				color: colors[2],
                yAxis: 2,
                visible: false,
                lineWidth: 1
            }
            var objSeriesZ2 = {
				name: compareYear + '-水位',
				dashStyle: 'Dot',
				color: colors[0],
                data: [],
                lineWidth: 1
            }
            var objSeriesQ2 = {
				name: compareYear + '-流量',
				dashStyle: 'Dot',
                data: [],
				color: colors[2],
                yAxis: 1,
                visible: false,
                lineWidth: 1
            }
            var objSeriesS2 = {
                name: compareYear + '-含沙量',
				data: [],
				dashStyle: 'Dot',
				color: colors[2],
                yAxis: 2,
                visible: false,
                lineWidth: 1
            }
            $.each(d.rows.reverse(), function (i, item) {
                if (item["CurrentZ"]) {

                    if (minZTM == com.formatTimemm(item["TM"]) || maxZTM == com.formatTimemm(item["TM"])) {
                        objSeriesZ1.data.push({
                            x: com.ToUTC(item["TM"]), y: Number(item["CurrentZ"]), dataLabels: { enabled: true, color: '#f00' }, marker: {
                                enabled: true,
                                radius: 5
                            }
                        });
                    } else {
                        objSeriesZ1.data.push([com.ToUTC(item["TM"]), Number(item["CurrentZ"])]);
                    }

                }

                if (item["CurrentQ"]) {
                    if (minQTM == com.formatTimemm(item["TM"]) || maxQTM == com.formatTimemm(item["TM"])) {
                        objSeriesQ1.data.push({
                            x: com.ToUTC(item["TM"]), y: item["CurrentQ"], dataLabels: { enabled: true, color: '#f00' }, marker: {
                                enabled: true,
                                radius: 5,
                                fillColor: '#f00',
                                symbol: 'circle'
                            }
                        });
                    } else {
                        objSeriesQ1.data.push([com.ToUTC(item["TM"]), item["CurrentQ"]]);
                    }
                    
                }
                if (item["CurrentS"]) {
                    if (minQTM == com.formatTimemm(item["TM"]) || maxQTM == com.formatTimemm(item["TM"])) {
                        objSeriesS1.data.push({
                            x: com.ToUTC(item["TM"]), y: item["CurrentS"], dataLabels: { enabled: true, color: '#f00' }, marker: {
                                enabled: true,
                                radius: 5,
                                fillColor: '#f00',
                                symbol: 'circle'
                            }
                        });
                    } else {
                        objSeriesS1.data.push([com.ToUTC(item["TM"]), item["CurrentS"]]);
                    }

                }

                if (item["CompareZ"]) {

                    if (minZTM == com.formatTimemm(item["TM"]) || maxZTM == com.formatTimemm(item["TM"])) {
                        objSeriesZ2.data.push({
                            x: com.ToUTC(item["TM"]), y: Number(item["CompareZ"]), dataLabels: { enabled: true, color: '#f00' }, marker: {
                                enabled: true,
                                radius: 5
                            }
                        });
                    } else {
                        objSeriesZ2.data.push([com.ToUTC(item["TM"]), Number(item["CompareZ"])]);
                    }

                }

                if (item["CompareQ"]) {
                    if (minQTM == com.formatTimemm(item["TM"]) || maxQTM == com.formatTimemm(item["TM"])) {
                        objSeriesQ2.data.push({
                            x: com.ToUTC(item["TM"]), y: item["CompareQ"], dataLabels: { enabled: true, color: '#f00' }, marker: {
                                enabled: true,
                                radius: 5,
                                fillColor: '#f00',
                                symbol: 'circle'
                            }
                        });
                    } else {
                        objSeriesQ2.data.push([com.ToUTC(item["TM"]), item["CompareQ"]]);
                    }

                }
                if (item["CompareS"]) {
                    if (minQTM == com.formatTimemm(item["TM"]) || maxQTM == com.formatTimemm(item["TM"])) {
                        objSeriesS2.data.push({
                            x: com.ToUTC(item["TM"]), y: item["CompareS"], dataLabels: { enabled: true, color: '#f00' }, marker: {
                                enabled: true,
                                radius: 5,
                                fillColor: '#f00',
                                symbol: 'circle'
                            }
                        });
                    } else {
                        objSeriesS2.data.push([com.ToUTC(item["TM"]), item["CompareS"]]);
                    }

                }

            });
            arrSeries.push(objSeriesZ1);
            arrSeries.push(objSeriesZ2);
            arrSeries.push(objSeriesQ1);
            arrSeries.push(objSeriesQ2);            
            arrSeries.push(objSeriesS1);
            arrSeries.push(objSeriesS2);
            return arrSeries;
        }
        var minZTM;
        var maxZTM;
        var minQTM;
        var maxQTM
        function ComputeTable(d) {
            minZV = Number.MAX_VALUE;
            maxZV = Number.MIN_VALUE;
            //var minZTM;
            //var maxZTM;

            var minQV = Number.MAX_VALUE;
            var maxQV = Number.MIN_VALUE;
            //var minQTM;
            //var maxQTM;

            $.each(d.reverse(), function (i, item) {
                if (item["Z"]) {
                    if (Number(item["Z"]) > maxZV) {
                        maxZV = Number(item["Z"]);
                        maxZTM = utils.formatDate(item["TM"], 'yyyy-MM-dd hh:mm');
                    }
                    if (Number(item["Z"]) < minZV) {
                        minZV = Number(item["Z"]);
                        minZTM = utils.formatDate(item["TM"], 'yyyy-MM-dd hh:mm');
                    }
                }

                if (item["Q"]) {
                    if (Number(item["Q"]) > maxQV) {
                        maxQV = item["Q"];
                        maxQTM = utils.formatDate(item["TM"], 'yyyy-MM-dd hh:mm');
                    }

                    if (Number(item["Q"]) < minQV) {
                        minQV = item["Q"];
                        minQTM = utils.formatDate(item["TM"], 'yyyy-MM-dd hh:mm');
                    }
                }

            });
            $("#maxZ").html(maxZV == Number.MIN_VALUE ? "" : maxZV);
            $("#maxZTM").html(maxZTM);
            $("#minZ").html(minZV == Number.MAX_VALUE ? "" : minZV);
            $("#minZTM").html(minZTM);
            $("#maxQ").html(maxQV == Number.MIN_VALUE ? "" : maxQV);
            $("#maxQTM").html(maxQTM);
            $("#minQ").html(minQV == Number.MAX_VALUE ? "" : minQV);
            $("#minQTM").html(minQTM);
            if ($("#maxZ").html()) {
                $("#czZ").html($("#maxZ").html());
                if ($("#minZ").html()) {
                    $("#czZ").html(changevalue(Number($("#maxZ").html() - Number($("#minZ").html()))));
                }
            } else {
                $("#czZ").html($("#minZ").html());
            }

        }


        function LeftCollapse() {
            $("#divLineContainer").width($(document).width() - 50);
            ReflowChart();
        }

        function LeftExpand() {

            $("#divLineContainer").width($(document).width() - 430);
            ReflowChart();
        }
        function ReflowChart() {
            var HChart = $("#divLine").highcharts();
            HChart.reflow();
        }
        function bindAreaDataGrid() {
            $('#areastcd').combogrid({
                panelWidth: 300,
                multiple: false,
                idField: 'CODE',
                textField: 'KEYNAME',
                url: "/RealData/River/GetStaByKeywords/",
				queryParams: { "sttp": "'ZZ','ZQ'","q": "" },
                columns: [[
                    { field: 'CODE', width: '30%', hidden: false, title: '站点', align: 'center' },
                    { field: 'KEYNAME', width: '35%', title: '站名', align: 'center' },
                    { field: 'TYPE', width: '35%', title: '站类', align: 'center', formatter: changesttp }

                ]],
                onLoadSuccess: function (dd) {

					$('#areastcd').combogrid('setValue', dd.rows[0].CODE);
                    Search();

                }

            });
        }
        function doSearchSta(value, name) {
            var ele = $("#areastcd");
            var grid = ele.combogrid('grid');

			$.getJSON("/RealData/River/GetStaByKeywords/", { "sttp": "'ZZ','ZQ'", "q": value }, function (jsondata) {

                grid.datagrid("loadData", jsondata);
            });
        }
    </script>

}