
@{
    ViewData["Title"] = "MapsIndex";
    Layout = null;
}
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge,10,9,Chrome=1" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no" />
    <title>三维窗口</title>
    @*<script src="~/lib/jquery/dist/jquery-1.10.2.js"></script>*@
    <script src="~/lib/Cesium-1.62/Build/CesiumUnminified/Cesium.js"></script>
    <script type="text/javascript" src="~/lib/jquery/dist/jquery-1.10.2.min.js"></script>
    <script type="text/javascript" src="~/lib/jquery-easyui-1.5.2/jquery.easyui.min.js"></script>
    <link rel="stylesheet" type="text/css" href="~/lib/jquery-easyui-1.5.2/themes/icon.css" />
    <link rel="stylesheet" type="text/css" href="~/lib/jquery-easyui-1.5.2/themes/bootstrap/easyui_bo.css" />
    <link rel="stylesheet" type="text/css" href="~/css/Site.css" />
    <link rel="stylesheet" href="~/css/Cesium/layer.css" />
    <link rel="stylesheet" href="~/css/Cesium/layer2.css" />
    <link href="~/css/Cesium/mars3d.css" rel="stylesheet" />
    <link href="~/lib/Cesium-1.62/Build/Cesium/Widgets/widgets.css" rel="stylesheet" type="text/css" />
    <link href="~/css/Cesium/view.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" type="text/css" href="~/lib/jquery-easyui-1.5.2/themes/iconextension.css" />
    <link rel="stylesheet" type="text/css" href="~/lib/jquery-plugin/showloading/showLoading.css" />
    <script src="~/js/core/framework-ui.js"></script>
    <script src="~/js/core/utils.js"></script>
    <script src="~/js/core/common.js"></script>
    <link href="~/lib/fonts/framework-font.css" rel="stylesheet" type="text/css" />
    @*<script type="text/javascript" src="http://localhost/3.22/"></script>*@
    <script src="~/lib/moment/moment-with-locales.min.js" type="text/javascript"></script>
    <script src="~/lib/jquery-plugin/showloading/jquery.showLoading.min.js"></script>
    <script type="text/javascript" src="~/lib/layer3.0/layer.js"></script>

    <script type="text/javascript" src="~/lib/kriging.js-master/kriging.js"></script>
    <script type="text/javascript" src="~/lib/turf5.1.6/turf.min.js"></script>
    <script type="text/javascript" src="~/lib/tfjs/tfjs.js"></script>

    <style type="text/css">
        html, body, #cesiumContainer {
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden;
        }
        /* 宽度为100px */
        .cesium-widget-credits {
            display: none !important;
            visibility: hide !important;
        }

        #legend {
            width: 90px;
            height: 190px;
            padding: 0px;
            background: #fff;
            font-family: sans-serif;
            font-size: 9pt;
            color: black;
            position: absolute;
            bottom: 30px;
            left: 30px;
            z-index: 40;
            border: 1px solid #E1E1E1;
            box-shadow: 0 6px 6px -6px #999;
        }

            #legend ul {
                margin: 5px;
                padding: 0px;
            }

                #legend ul li {
                    list-style-type: none;
                    margin: 0px;
                    padding: 3px 5px;
                }

                    #legend ul li label {
                        margin-left: 5px;
                    }

                    #legend ul li span {
                        border: 1px solid #E1E1E1;
                    }


        #legendynamaic {
            width: 130px;
            height: 135px;
            padding: 0px;
            background: #fff;
            font-family: sans-serif;
            font-size: 9pt;
            color: white;
            position: absolute;
            bottom: 50px;
            right: 30px;
            z-index: 40;
            border: 1px solid #E1E1E1;
            box-shadow: 0 6px 6px -6px #999;
        }

            #legendynamaic ul {
                margin: 5px;
                padding: 0px;
            }

                #legendynamaic ul li {
                    list-style-type: none;
                    margin: 0px;
                    padding: 3px 5px;
                }

                    #legendynamaic ul li label {
                        margin-left: 5px;
                    }

                    #legendynamaic ul li span {
                        border: 1px solid #E1E1E1;
                        width: 100px;
                    }

        #legendGrid {
            width: 380px;
            height: 270px;
            padding: 0px;
            background: #fff;
            font-family: sans-serif;
            font-size: 9pt;
            color: white;
            position: absolute;
            top: 50px;
            right: 30px;
            z-index: 40;
            border: 1px solid #E1E1E1;
            box-shadow: 0 6px 6px -6px #999;
        }

        .bo_lpopcon {
            width: 240px;
            height: 80%;
            position: absolute;
            left: 0;
            top: 48px;
            z-index: 1;
        }

        #treeLeft {
            width: 100%;
        }

        #onelist tr td:nth-child(2) a {
            color: blue;
            width: 24px;
            display: inline-block;
        }

        #twolist tr td:nth-child(2) a {
            color: blue;
            width: 24px;
            display: inline-block;
        }

        #threelist tr td:nth-child(2) a {
            color: blue;
            width: 24px;
            display: inline-block;
        }

        #tblDetail tr {
            border-bottom: 1px solid #a2c7e6;
        }

        #onelist tr td {
            font-size: 14px;
        }

            #onelist tr td a {
                font-size: 13px;
            }

        #twolist tr td {
            font-size: 14px;
        }

            #twolist tr td a {
                font-size: 13px;
            }

        #threelist tr td {
            font-size: 14px;
        }

            #threelist tr td a {
                font-size: 13px;
            }

        .bo_topicon {
            display: inline-block;
            width: 35px;
            height: 35px;
        }

            .bo_topicon img {
                width: 100%;
                height: 100%;
            }
    </style>
    <script language="javascript" type="text/javascript">
        //根据实体的ID对其进行显示隐藏操作
        function showEintity(id, bShow) {
            var entityObj = g_viewer.entities.getById(id);
            entityObj.show = bShow;
        }

        //对三维场景中创建的实时数据
        function showRealDataLabel(bShow) {
            removeAllen("Station");//G_ShowEntitys(g_RealData, bShow);
        }
        //创建测站实体
        function createTreeLabel(stnm, stcd, lgtd, lttd, imgPath, type) {
            var typename = "";
            //实体的可视距离，单位米
            if (type == "ZZ") {
                typename = "水位站";
            }
            else if (type == "ZQ") {
                typename = "水文站";
            }
            else if (type == "RR") {
                typename = "水库水文站";
            }
            else {
                typename = "雨量站";
            }
            //实体的可视距离，单位米
            var ddc = new Cesium.DistanceDisplayCondition(10, 200000)

            var tmpObj = {
                id: stcd,
                name: stnm,
                description: typename + "：" + stnm,
                sttp: type,
                show: true,
                position: Cesium.Cartesian3.fromDegrees(lgtd, lttd, 0),
                label: {
                    text: stnm,
                    scale: 1,
                    font: '16px sans-serif',
                    fillColor: Cesium.Color.BLACK,
                    style: Cesium.LabelStyle.FILL,//Cesium.LabelStyle.FILL_AND_OUTLINE,
                    //outlineWidth: 2,
                    showBackground: true,
                    backgroundColor: Cesium.Color.WHITE,
                    verticalOrigin: Cesium.VerticalOrigin.BOTTOM, //垂直方向以底部来计算标签的位置
                    pixelOffset: new Cesium.Cartesian2(0, -9),   //偏移量
                    distanceDisplayCondition: ddc
                },
                billboard: {
                    image: imgPath,
                    width: 20,
                    height: 20,
                    distanceDisplayCondition: ddc
                }
            }

            var entityObj = g_viewer.entities.add(tmpObj);

            flyToPos(lgtd, lttd, 15000);
            //g_viewer.flyTo(entityObj);
            return entityObj;
        }

        //飞向经纬度
        function flyToPos(lgtd, lttd, hh) {
            g_viewer.camera.flyTo({
                destination: Cesium.Cartesian3.fromDegrees(lgtd, lttd, hh)
            });
        }
    </script>
</head>
<body>
    @* bobo   加的内容   开始  *@
    <a href="###" class="bo_iimg1">
        <img src="~/images/bo_iicon1.png" alt="实时信息" title="实时信息" />
    </a>
    <section class="bo_tabcon1" style="">
        <div class="easyui-tabs" style="width:100%;height:100%;">
            <a href="###" class="tabs-close bo_closebtn"></a>
            <div title="实时水情" style="">
                <table id="tab_River" class="easyui-datagrid" title=""></table>
            </div>
            <div title="水库水情" style="">
                <table id="tab_Rsvr" class="easyui-datagrid" title=""></table>
            </div>
            <div title="24小时降水" data-options="" style="">
                <table id="tab_Rain" class="easyui-datagrid" title=""></table>
            </div>
        </div>
    </section>

    <section class="bo_lpopcon">
        @*<div class="easyui-layout bo_layout1" style="width:100%;height:100%;">*@
        @*<div data-options="region:'west',split:false" title="预警信息" style="width:242px;">*@
        <table id="treeLeft" style="height: 100%; margin: 0px; background-color: #F6FAFD;"
               align="center" border="0" cellpadding="0" cellspacing="0" width="230px">
            <tr>
                <td style="height: 19px;padding: 5px 0pc;background: #bee2ff; padding-right: 5px;" align="center">
                    <div>
                        <input name="ckbyl" id="ckbyl" type="checkbox" checked="true" onclick="ManageDetails(this,'PP');" />雨情
                        <input name="ckbhd" id="ckbhd" type="checkbox" checked="true" onclick="ManageDetails(this,'ZZ');" />河道
                        <input name="ckbsk" id="ckbsk" type="checkbox" checked="true" onclick="ManageDetails(this,'RR');" />水库
                    </div>
                </td>
            </tr>
            <tr>
                <td id="tddiv" valign="top" align="left" style="height: 200px;">
                    <div id="div_info" runat="server" style="margin: 0px; padding: 0px; border-top: 1px solid #D0D0BF;
                line-height: 20px; height: 200px; overflow-x: none; overflow-y: auto;">
                        <div id="yujing" style="height:100%"></div>
                        @*@Html.Raw(ViewBag.html)*@
                    </div>
                </td>
            </tr>
            <tr>
                <td valign="top" align="left">
                    <div id="divTime" runat="server" style="margin: 0px; padding: 2px 0px; border: 1px solid #d0d0bf; width: 100%; background-color:#2394f2;" class="jb">
                        <center>
                            <div style="">
                                <span id="spTime" style="font-size: medium; color: White;">

                                </span>
                            </div>
                        </center>
                    </div>
                    <div id="divdetail" style="position: absolute; line-height: 20px; margin-top: 5px;
                width: 100%; font-size: 9pt; overflow-x: none; overflow-y: auto;">

                    </div>
                </td>
            </tr>
        </table>
        @*</div>*@

        @*<div data-options="region:'center'" style="visibility: hidden;"></div>
            </div>*@
    </section>
    @* bobo   加的内容   结束  *@
    <div id="cesiumContainer" onmousemove="onCesiumMouseMove(event);">
        <div id="div_location_jwd" class="location-bar no-print" style="left: 2px; bottom: 2px;">
        </div>
    </div>
    <script language="javascript" type="text/javascript">
        //[{ "x": "90.032361", "y": "29.793778", "value": "1128.0" }, { "x": "89.976111", "y": "29.734472", "value": "1089.0" }, { "x": "89.927694", "y": "29.732833", "value": "1103.0" }, { "x": "89.944556", "y": "29.671778", "value": "974.5" }, { "x": "90.030778", "y": "29.617083", "value": "1020.5" }, { "x": "90.013750", "y": "29.549250", "value": "848.2" }, { "x": "89.951611", "y": "29.610361", "value": "1080.0" }, { "x": "90.102694", "y": "29.488472", "value": "683.4" }, { "x": "90.133250", "y": "29.490583", "value": "799.0" }, { "x": "90.151611", "y": "29.497917", "value": "784.0" }, { "x": "90.146306", "y": "29.452000", "value": "667.6" }, { "x": "92.050000", "y": "30.433000", "value": "873.0" }, { "x": "91.348571", "y": "30.182189", "value": "1319.9" }, { "x": "91.793346", "y": "29.899291", "value": "1360.6" }, { "x": "91.160020", "y": "29.640400", "value": "1578.7" }, { "x": "90.549831", "y": "30.081572", "value": "913.1" }, { "x": "90.952000", "y": "29.439000", "value": "0.0" }, { "x": "92.850000", "y": "31.070000", "value": "343.6" }, { "x": "92.667000", "y": "30.780000", "value": "335.2" }, { "x": "92.367000", "y": "30.667000", "value": "322.2" }, { "x": "90.633000", "y": "30.900000", "value": "206.6" }, { "x": "90.933000", "y": "30.417000", "value": "249.0" }, { "x": "91.376111", "y": "29.681667", "value": "0" }, { "x": "91.720056", "y": "30.571028", "value": "1101.6" }, { "x": "91.538806", "y": "30.631083", "value": "1055.4" }, { "x": "91.484694", "y": "30.587056", "value": "1033.8" }, { "x": "91.401639", "y": "30.558750", "value": "1023.6" }, { "x": "91.279500", "y": "30.551917", "value": "904.6" }, { "x": "91.335556", "y": "30.578583", "value": "920.4" }, { "x": "91.335778", "y": "30.540139", "value": "1352.6" }, { "x": "91.358361", "y": "30.509083", "value": "1051.0" }, { "x": "91.191472", "y": "30.568139", "value": "924.4" }, { "x": "91.275444", "y": "30.534056", "value": "967.8" }, { "x": "91.207944", "y": "30.508111", "value": "855.0" }, { "x": "91.288333", "y": "30.528028", "value": "1034.6" }, { "x": "91.106917", "y": "30.485944", "value": "781.2" }, { "x": "92.298972", "y": "29.691611", "value": "620.0" }, { "x": "92.236778", "y": "29.695250", "value": "0.0" }, { "x": "92.156500", "y": "29.709556", "value": "1110.0" }, { "x": "92.111778", "y": "29.705028", "value": "1153.5" }, { "x": "92.079000", "y": "29.710583", "value": "1.5" }, { "x": "91.894722", "y": "29.661944", "value": "23.0" }, { "x": "91.908611", "y": "29.669167", "value": "1202.5" }, { "x": "91.915056", "y": "29.765278", "value": "253.5" }, { "x": "91.897583", "y": "29.729778", "value": "751.0" }, { "x": "91.820667", "y": "29.682333", "value": "1308.5" }, { "x": "92.078917", "y": "29.710556", "value": "1329.0" }, { "x": "91.857306", "y": "29.819139", "value": "988.5" }, { "x": "91.829194", "y": "29.782083", "value": "1018.5" }, { "x": "91.492500", "y": "29.978556", "value": "1347.5" }, { "x": "91.460556", "y": "29.936944", "value": "591.4" }, { "x": "91.462361", "y": "29.877389", "value": "1076.0" }, { "x": "91.459611", "y": "29.842750", "value": "0.0" }, { "x": "90.969750", "y": "29.971694", "value": "985.8" }, { "x": "91.031806", "y": "29.937389", "value": "942.4" }, { "x": "90.970000", "y": "29.884583", "value": "1017.0" }, { "x": "91.086278", "y": "29.950750", "value": "963.6" }, { "x": "91.158694", "y": "29.905306", "value": "770.4" }, { "x": "91.093500", "y": "29.872833", "value": "938.6" }, { "x": "91.140583", "y": "29.978500", "value": "976.6" }, { "x": "91.188833", "y": "29.881639", "value": "925.8" }, { "x": "91.239750", "y": "29.960083", "value": "901.2" }, { "x": "91.261833", "y": "29.862056", "value": "849.0" }, { "x": "91.277778", "y": "29.878861", "value": "893.0" }, { "x": "91.370611", "y": "29.939111", "value": "912.4" }, { "x": "91.362380", "y": "29.907169", "value": "985.4" }, { "x": "91.357361", "y": "29.862056", "value": "983.0" }, { "x": "91.159750", "y": "29.711333", "value": "2239.0" }, { "x": "91.117583", "y": "29.700639", "value": "2055.5" }, { "x": "91.115694", "y": "29.667528", "value": "39.0" }, { "x": "90.983500", "y": "29.432361", "value": "1033.5" }, { "x": "90.951028", "y": "29.429417", "value": "3.0" }, { "x": "91.165167", "y": "29.767631", "value": "995.6" }, { "x": "91.078056", "y": "29.723333", "value": "1361.0" }, { "x": "91.068333", "y": "29.724056", "value": "1130.2" }, { "x": "91.165167", "y": "29.767611", "value": "1328.0" }, { "x": "91.250833", "y": "29.728333", "value": "986.4"}]
        var g_roadNetImageryLayer;
        var g_lable_near = 10, g_lable_far = 4000000;
        //存储所有实时数据对象id
        var g_RealData = new Array(), g_Video = new Array();
        //对应图层管理中的各个分类，每个分类一个全局变量
        var g_layer_Entitys_River = new Array(), g_layer_Entitys_Rsvr = new Array(), g_layer_Entitys_Rain = new Array(), g_layer_Entitys_GL = new Array(), g_layer_Entitys_ZL = new Array(), g_layer_Entitys_QY = new Array();
        var g_layer_Entitys_Line1 = new Array(), g_layer_Entitys_Polygon1 = new Array(), g_layer_Entitys_Line2 = new Array(), g_layer_Entitys_Polygon2 = new Array(), g_layer_Entitys_Line3 = new Array(), g_layer_Entitys_Polygon3 = new Array();
        //天地图影像
        var g_viewer = new Cesium.Viewer('cesiumContainer', {
            imageryProvider: new Cesium.WebMapTileServiceImageryProvider({
                url: "http://t0.tianditu.com/vec_w/wmts?service=wmts&request=GetTile&version=1.0.0&LAYER=vec&tileMatrixSet=w&TileMatrix={TileMatrix}&TileRow={TileRow}&TileCol={TileCol}&style=default&format=tiles&tk=3b6e1ded5e34e4a985ce9167106c62a0",
                // "https://t0.tianditu.gov.cn/vec_w/wmts?service=wmts&request=GetTile&version=1.0.0&LAYER=img&tileMatrixSet=w&TileMatrix={TileMatrix}&TileRow={TileRow}&TileCol={TileCol}&style=default&format=tiles&tk=3b6e1ded5e34e4a985ce9167106c62a0",
                //"http://t0.tianditu.gov.cn/img_w/wmts?SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=img&STYLE=default&TILEMATRIXSET=w&FORMAT=tiles&TILEMATRIX={z}&TILEROW={x}&TILECOL={y}&tk=3b6e1ded5e34e4a985ce9167106c62a0",

                layer: "tdtVecBasicLayer",//"tdtBasicLayer",
                style: "default",
                format: "image/jpeg",
                tileMatrixSetID: "GoogleMapsCompatible",
                minimumLevel: 1,
                maximumLevel: 18,
                show: false
            }),
            geocoder: true,
            baseLayerPicker: false,
            fullscreenButton: false,
            homeButton: false,
            infoBox: false,
            selectionIndicator: false,
            timeline: false,
            navigationHelpButton: false,
            navigationInstructionsInitiallyVisible: false,
            animation: false,
            sceneMode: Cesium.SceneMode.SCENE3D//SCENE2D
        });

        //实时水雨情情三维标注数据
        var g_realData_Datasource = new Cesium.CustomDataSource('realWater');
        g_realData_Datasource.clustering.enabled = true;
        g_realData_Datasource.clustering.pixelRange = 100;
        g_realData_Datasource.clustering.minimumClusterSize = 1;

        g_realData_Datasource.clustering.clusterEvent.addEventListener(function (entities, cluster) {
            if (entities[0].id.substr(0, 7) == 'real_PP') {
                cluster.label.show = true;
                cluster.billboard.show = true;

                var labelTxt = entities[0].label.text.getValue();
                var showBackground = entities[0].label.showBackground.getValue();
                if ($.trim(labelTxt) == '') {
                    labelTxt = ' ';
                    showBackground = false;
                }

                cluster.label.text = labelTxt;
                cluster.label.scale = entities[0].label.scale.getValue();
                cluster.label.font = entities[0].label.font.getValue();
                cluster.label.fillColor = entities[0].label.fillColor.getValue();
                cluster.label.style = entities[0].label.style.getValue();
                cluster.label.showBackground = showBackground;
                cluster.label.backgroundColor = entities[0].label.backgroundColor.getValue();//new Cesium.Color(99/255, 182/255,250/255, 1),
                //cluster.label.horizontalOrigin = Cesium.HorizontalOrigin.LEFT;
                cluster.label.verticalOrigin = Cesium.VerticalOrigin.BOTTOM;//Cesium.VerticalOrigin.BOTTOM, 垂直方向以底部来计算标签的位置
                cluster.label.pixelOffset = new Cesium.Cartesian2(0, -9);   //偏移量

                cluster.billboard.image = entities[0].billboard.image.getValue();
                cluster.billboard.width = entities[0].billboard.width.getValue();
                cluster.billboard.height = entities[0].billboard.height.getValue();
                //cluster.billboard.rotation = entities[0].billboard.rotation.getValue();
                //cluster.billboard.horizontalOrigin = entities[0].billboard.horizontalOrigin.getValue();
                //cluster.billboard.verticalOrigin = entities[0].billboard.verticalOrigin.getValue();
            }
            else if (entities[0].id.substr(0, 7) == 'real_RR')
            {
                cluster.label.show = true;
                cluster.billboard.show = true;

                //cluster.label.text = entities.length.toLocaleString();
                cluster.label.text = entities[0].label.text.getValue();
                cluster.label.scale = entities[0].label.scale.getValue();
                cluster.label.font = entities[0].label.font.getValue();
                cluster.label.fillColor = entities[0].label.fillColor.getValue();

                cluster.label.style = entities[0].label.style.getValue();
                cluster.label.showBackground = entities[0].label.showBackground.getValue();
                cluster.label.backgroundColor = entities[0].label.backgroundColor.getValue();//new Cesium.Color(99/255, 182/255,250/255, 1),
                cluster.label.horizontalOrigin = Cesium.HorizontalOrigin.LEFT;
                cluster.label.verticalOrigin = Cesium.VerticalOrigin.BOTTOM;//Cesium.VerticalOrigin.BOTTOM, 垂直方向以底部来计算标签的位置
                cluster.label.pixelOffset = new Cesium.Cartesian2(12, 0);   //偏移量

                cluster.billboard.image = entities[0].billboard.image.getValue();
                cluster.billboard.width = entities[0].billboard.width.getValue();
                cluster.billboard.height = entities[0].billboard.height.getValue();
                cluster.billboard.rotation = entities[0].billboard.rotation.getValue();
                cluster.billboard.horizontalOrigin = entities[0].billboard.horizontalOrigin.getValue();
                cluster.billboard.verticalOrigin = entities[0].billboard.verticalOrigin.getValue();
            }
            else {
                var stcds = "real_ZZ_40103400,real_ZZ_40103900,real_ZZ_40104000,real_ZZ_40104150";
                if (stcds.indexOf(entities[0].id) >= 0) {
                    cluster.label.show = false;
                    cluster.billboard.show = false;
                    return;
                }
                cluster.label.show = true;
                cluster.billboard.show = true;

                //cluster.label.text = entities.length.toLocaleString();
                cluster.label.text = entities[0].description.getValue();
                cluster.label.scale = entities[0].label.scale.getValue();
                cluster.label.font = entities[0].label.font.getValue();
                cluster.label.fillColor = entities[0].label.fillColor.getValue();

                //cluster.label.fillColor = Cesium.Color.WHITE;
                //cluster.label.outlineColor = Cesium.Color.WHITE;
                //cluster.label.outlineWidth = 2;

                cluster.label.style = entities[0].label.style.getValue();
                cluster.label.showBackground = entities[0].label.showBackground.getValue();
                cluster.label.backgroundColor = entities[0].label.backgroundColor.getValue();//new Cesium.Color(99/255, 182/255,250/255, 1),
                //cluster.label.backgroundColor = new Cesium.Color(51/255, 153/255, 204/255, 0.8)

                cluster.label.horizontalOrigin = Cesium.HorizontalOrigin.LEFT;
                cluster.label.verticalOrigin = Cesium.VerticalOrigin.CENTER;//Cesium.VerticalOrigin.BOTTOM, 垂直方向以底部来计算标签的位置
                cluster.label.pixelOffset = new Cesium.Cartesian2(12, 0);   //偏移量

                cluster.billboard.image = entities[0].billboard.image.getValue();
                cluster.billboard.width = entities[0].billboard.width.getValue();
                cluster.billboard.height = entities[0].billboard.height.getValue();
                cluster.billboard.rotation = entities[0].billboard.rotation.getValue();
                cluster.billboard.horizontalOrigin = entities[0].billboard.horizontalOrigin.getValue();
                cluster.billboard.verticalOrigin = entities[0].billboard.verticalOrigin.getValue();
            }
            
        });

        //g_viewer.scene.postProcessStages.fxaa.enabled = false;
        //更换为影像底图
        function changeToImageBaseMap() {
            g_viewer.imageryLayers.removeAll();

            g_viewer.imageryLayers.addImageryProvider(new Cesium.WebMapTileServiceImageryProvider({
                url: "http://t0.tianditu.com/img_w/wmts?service=wmts&request=GetTile&version=1.0.0&LAYER=img&tileMatrixSet=w&TileMatrix={TileMatrix}&TileRow={TileRow}&TileCol={TileCol}&style=default&format=tiles&tk=3b6e1ded5e34e4a985ce9167106c62a0",
                layer: "tdtBasicLayer",
                style: "default",
                format: "image/jpeg",
                tileMatrixSetID: "GoogleMapsCompatible",
                maximumLevel: 18
            }));

            //全球影像中文注记服务
            g_roadNetImageryLayer = g_viewer.imageryLayers.addImageryProvider(new Cesium.WebMapTileServiceImageryProvider({
                url: "http://t0.tianditu.com/cia_w/wmts?service=wmts&request=GetTile&version=1.0.0&LAYER=cia&tileMatrixSet=w&TileMatrix={TileMatrix}&TileRow={TileRow}&TileCol={TileCol}&style=default.jpg&tk=3b6e1ded5e34e4a985ce9167106c62a0",
                layer: "tdtAnnoLayer",
                style: "default",
                format: "image/jpeg",
                tileMatrixSetID: "GoogleMapsCompatible"
            }));
            g_roadNetImageryLayer.show = $("#chkRoadNet").prop("checked");
        }

        //更换为矢量底图
        function changeToVectorBaseMap() {
            g_viewer.imageryLayers.removeAll();

            g_viewer.imageryLayers.addImageryProvider(new Cesium.WebMapTileServiceImageryProvider({
                url: "http://t0.tianditu.com/vec_w/wmts?service=wmts&request=GetTile&version=1.0.0&LAYER=vec&tileMatrixSet=w&TileMatrix={TileMatrix}&TileRow={TileRow}&TileCol={TileCol}&style=default&format=tiles&tk=3b6e1ded5e34e4a985ce9167106c62a0",
                layer: "tdtVecBasicLayer",
                style: "default",
                format: "image/jpeg",
                tileMatrixSetID: "GoogleMapsCompatible",
                maximumLevel: 18
            }));

            g_roadNetImageryLayer = g_viewer.imageryLayers.addImageryProvider(new Cesium.WebMapTileServiceImageryProvider({
                url: "http://t0.tianditu.com/cva_w/wmts?service=wmts&request=GetTile&version=1.0.0&LAYER=cva&tileMatrixSet=w&TileMatrix={TileMatrix}&TileRow={TileRow}&TileCol={TileCol}&style=default.jpg&tk=3b6e1ded5e34e4a985ce9167106c62a0",
                layer: "tdtAnnoLayer",
                style: "default",
                format: "image/jpeg",
                maximumLevel: 18,
                tileMatrixSetID: "GoogleMapsCompatible"
            }));
            g_roadNetImageryLayer.show = $("#chkRoadNet").prop("checked");
        }

        var imageryProvider = new Cesium.UrlTemplateImageryProvider({
            url: "http://localhost:8888/image_tiles/{z}/{x}/{y}.png",
            tilingScheme: new Cesium.WebMercatorTilingScheme(),
            fileExtension: 'png',
            minimumLevel: 0,
            maximumLevel: 20
        });

        //全屏切换
        function fullScreenSwitch() {
            top.setFullScreen();
            if ($("#sFSS").hasClass("fa-expand")) {
                $("#sFSS").addClass("fa-compress");
                $("#sFSS").removeClass("fa-expand");
            }
            else {
                $("#sFSS").addClass("fa-expand");
                $("#sFSS").removeClass("fa-compress");
            }
        }
        //点击底图设置事件
        function onClickBaseLayerBtn() {
            if ($(".container-basemap").hasClass("dropDown-visible")) {
                $(".container-basemap").removeClass("dropDown-visible");
            }
            else {
                $(".container-basemap").addClass("dropDown-visible");
            }
            //alert($(".container-basemap").hasClass("dropDown-visible"));
            //$(".container-basemap").addClass("dropDown-visible");
        }

        //初始位置
        function flyToInitpos() {
            //console.log(window.parent.pp_lgtd + " " + window.parent.pp_lttd + " " + window.parent.pp_height);
            var lgtd, lttd, height;
            if (window.parent.pp_lgtd == "0")
                lgtd = 113.65113410245;
            else
                lgtd = window.parent.pp_lgtd;
            if (window.parent.pp_lttd == "0")
                lttd = 34.76626768096;
            else
                lttd = window.parent.pp_lttd;
            if (window.parent.pp_height == "0")
                height = 2000000;
            else
                height = window.parent.pp_height;
            console.log(height);
            g_viewer.camera.flyTo({
                //destination: Cesium.Cartesian3.fromDegrees(91.12361187, 29.66866794,20000)//113.65113410245, 34.76626768096-郑州
                destination: Cesium.Cartesian3.fromDegrees(lgtd, lttd, 1300000),//(108.56211031535, 37.35117012468, 2000000)
                duration:0.01
            });
        }

        //选择底图
        function onBaseMapCheck(divObj) {
            $(".service-itemIcon").removeClass("service-itemIcon-selected");
            $(".service-itemUnSelected").removeClass("service-itemSelected");

            $("#" + divObj.id).addClass('service-itemIcon-selected');
            $("#" + divObj.id).children(".service-itemAttr").children(".service-itemUnSelected").addClass("service-itemSelected");
            //divObj.addClass('service-itemIcon-selected');
            if (divObj.dataset.id == 1) {
                changeToImageBaseMap();
            }
            else if (divObj.dataset.id == 2) {
                changeToVectorBaseMap();
            }
        }

        //地形数据
        //var g_terrainProvider = new Cesium.CesiumTerrainProvider({
        //    url: 'http://localhost:8012/terrainf',
        //    requestVertexNormals: true
        //});
        var g_terrainProvider = Cesium.createWorldTerrain();

        //路网数据复选框事件
        function onCheckRoadNet() {
            if ($("#chkRoadNet").prop("checked") == false) {
                $("#chkRoadNet").prop("checked", true);
                g_roadNetImageryLayer.show = $("#chkRoadNet").prop("checked");
            }
            else {
                $("#chkRoadNet").prop("checked", false);
                g_roadNetImageryLayer.show = $("#chkRoadNet").prop("checked");
            }
        }

        //地形数据复选框事件
        function onCheckTerrain() {
            //var obj = document.getElementById("chkTerrain");
            //alert(obj.checked);
            if ($("#chkTerrain").prop("checked") == false) {
                $("#chkTerrain").prop("checked", true);

                g_viewer.terrainProvider = g_terrainProvider;
                //g_viewer.globe.enableLighting = true;
            }
            else {
                $("#chkTerrain").prop("checked", false);

                g_viewer.terrainProvider = new Cesium.EllipsoidTerrainProvider();
                //g_viewer.globe.enableLighting = false;
                //g_viewer.terrainProvider = null;
            }
        }

        //点击图层管理按钮
        function onClickLayerMan() {
            //g_viewer.entities.removeAll();
            if ($("#divLayer").is(':hidden')) {
                initTree();
                $("#divLayer").show();
            }
            else {
                $("#divLayer").hide();
            }
        }

        //水利部地图服务
        //var supder = new Cesium.SuperMapImageryProvider({ url: 'http://10.1.7.87/iserver/services/map-RSWB/wmts100?&key=2BFFA92A2D539BD7AE42173ED5BA343F' });
        //var layer = g_viewer.imageryLayers.addImageryProvider(provider);

        //更改地理搜索输入框的内容
        $(".cesium-geocoder-input").attr("placeholder", "输入关键词...");
        //重定义地理搜索函数
        var g_geocoder = g_viewer.geocoder.viewModel;
        g_geocoder._searchCommand = Cesium.createCommand(
            function () {
                if (g_geocoder.isSearchInProgress) {
                    cancelGeocode(g_geocoder);
                    //alert("执行中");
                }
                else {
                    clearHotPt();
                    //geocoderSearch(g_geocoder.searchText);
                    geocoderSearchGD(g_geocoder.searchText);
                    $(".cesium-geocoder-input").val("搜索中...");
                    //g_geocoder.keepExpanded = false;
                    //cancelGeocode(g_geocoder);
                }
            }
        );
        /**
        坐标转换
        火星坐标转GPS*/
        //定义一些常量
        var g_x_PI = 3.14159265358979324 * 3000.0 / 180.0;
        var g_PI = 3.1415926535897932384626;
        var g_a = 6378245.0;
        var g_ee = 0.00669342162296594323;
        function bd09togcj02(bd_lon, bd_lat) {
            var g_x_PI = 3.14159265358979324 * 3000.0 / 180.0;
            var x = bd_lon - 0.0065;
            var y = bd_lat - 0.006;
            var z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * g_x_PI);
            var theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * g_x_PI);
            var gg_lng = z * Math.cos(theta);
            var gg_lat = z * Math.sin(theta);
            return [gg_lng, gg_lat];
        }
        function gcj02tobd09(lng, lat) {
            var z = Math.sqrt(lng * lng + lat * lat) + 0.00002 * Math.sin(lat * g_x_PI);
            var theta = Math.atan2(lat, lng) + 0.000003 * Math.cos(lng * g_x_PI);
            var bd_lng = z * Math.cos(theta) + 0.0065;
            var bd_lat = z * Math.sin(theta) + 0.006;
            return [bd_lng, bd_lat];
        }
        function wgs84togcj02(lng, lat) {
            if (out_of_china(lng, lat)) {
                return [lng, lat];
            }
            else {
                var dlat = transformlat(lng - 105.0, lat - 35.0);
                var dlng = transformlng(lng - 105.0, lat - 35.0);
                var radlat = lat / 180.0 * g_PI;
                var magic = Math.sin(radlat);
                magic = 1 - g_ee * magic * magic;
                var sqrtmagic = Math.sqrt(magic);
                dlat = (dlat * 180.0) / ((g_a * (1 - g_ee)) / (magic * sqrtmagic) * g_PI);
                dlng = (dlng * 180.0) / (g_a / sqrtmagic * Math.cos(radlat) * g_PI);
                var mglat = lat + dlat;
                var mglng = lng + dlng;
                return [mglng, mglat];
            }
        }
        function gcj02towgs84(lng, lat) {
            if (out_of_china(lng, lat)) {
                return [lng, lat];
            }
            else {
                var dlat = transformlat(lng - 105.0, lat - 35.0);
                var dlng = transformlng(lng - 105.0, lat - 35.0);
                var radlat = lat / 180.0 * g_PI;
                var magic = Math.sin(radlat);
                magic = 1 - g_ee * magic * magic;
                var sqrtmagic = Math.sqrt(magic);
                dlat = (dlat * 180.0) / ((g_a * (1 - g_ee)) / (magic * sqrtmagic) * g_PI);
                dlng = (dlng * 180.0) / (g_a / sqrtmagic * Math.cos(radlat) * g_PI);
                mglat = Number(lat) + Number(dlat);
                mglng = Number(lng) + Number(dlng);
                var retLng = lng * 2 - mglng;
                var retLat = lat * 2 - mglat;
                var retAry = new Array();
                retAry[0] = retLng
                retAry[1] = retLat;
                return retAry;
            }
        }
        function transformlat(lng, lat) {
            var ret = -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + 0.1 * lng * lat + 0.2 * Math.sqrt(Math.abs(lng));
            ret += (20.0 * Math.sin(6.0 * lng * g_PI) + 20.0 * Math.sin(2.0 * lng * g_PI)) * 2.0 / 3.0;
            ret += (20.0 * Math.sin(lat * g_PI) + 40.0 * Math.sin(lat / 3.0 * g_PI)) * 2.0 / 3.0;
            ret += (160.0 * Math.sin(lat / 12.0 * g_PI) + 320 * Math.sin(lat * g_PI / 30.0)) * 2.0 / 3.0;
            return ret
        }
        function transformlng(lng, lat) {
            var ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + 0.1 * lng * lat + 0.1 * Math.sqrt(Math.abs(lng));
            ret += (20.0 * Math.sin(6.0 * lng * g_PI) + 20.0 * Math.sin(2.0 * lng * g_PI)) * 2.0 / 3.0;
            ret += (20.0 * Math.sin(lng * g_PI) + 40.0 * Math.sin(lng / 3.0 * g_PI)) * 2.0 / 3.0;
            ret += (150.0 * Math.sin(lng / 12.0 * g_PI) + 300.0 * Math.sin(lng / 30.0 * g_PI)) * 2.0 / 3.0;
            return ret
        }
        function out_of_china(lng, lat) {
            return (lng < 72.004 || lng > 137.8347) || ((lat < 0.8293 || lat > 55.8271) || false);
        }

        //禁止表单引起jQuery POST
        document.onkeydown = function (e) {
            var e = event || window.event || arguments.callee.caller.arguments[0];
            if (e && e.keyCode == 13) {
                e.preventDefault();
            }
        }
        /* 搜索 */
        //通过高德的POI搜索服务进行关键词搜索
        function geocoderSearchGD(searchText) {
            var queryUrl = 'http://restapi.amap.com/v3/place/text';
            //queryUrl += 'key=57f8ebe12797a73fc5b87f5d4ef859b1&';
            //queryUrl += 'keywords=' + searchText;
            //queryUrl = encodeURI(queryUrl);
            var param;
            param = { 'key': '57f8ebe12797a73fc5b87f5d4ef859b1', 'keywords': searchText };
            $.post(queryUrl, param, reGeocoderSearchGD);
        }
        //高德POII搜索回调函数
        function reGeocoderSearchGD(result) {
            var searchAry = result.pois;
            if (searchAry == null) {
                return;
            }
            var length = searchAry.length;
            for (var i = 0; i < length; i++) {
                var sName = searchAry[i].name;
                var sAddress = searchAry[i].address;
                var lonlat = (searchAry[i].location).split(",");
                var lonlatGps = gcj02towgs84(lonlat[0], lonlat[1]);
                var lgtd = lonlatGps[0];
                var lttd = lonlatGps[1];
                var sPhone = searchAry[i].tel;
                var sRegion = searchAry[i].pname + searchAry[i].cityname + searchAry[i].adname;
                var sType = searchAry[i].type;
                var sHotPtId = "hotPt" + searchAry[i].id;

                var imgPath = getHomeUrl() + "/Images/basemaps/hotball.gif";
                var entityObj = createHotPt(sName, lgtd, lttd, sAddress, sRegion, sPhone, sType, sHotPtId);

                //if (i == 0)
                //{
                //    g_viewer.zoomTo(g_viewer.entities.getById(entityObj.id));
                //    //flyToEntity2(entityObj);
                //}
            }
            g_viewer.flyTo(g_lastHotPt_entities);
            g_geocoder.searchText = "";
            $(".cesium-geocoder-input").val("");
            $(".cesium-geocoder-input").removeClass("cesium-geocoder-input-wide");
        }

        //通过天地图的POI搜索服务进行关键词搜索
        function geocoderSearch(searchText) {
            var queryUrl = 'http://www.tianditu.com/query.shtml?postStr=';
            queryUrl += '{"keyWord":"' + searchText;
            queryUrl += '","level":"20","mapBound":"-180,-90,180,90","queryType":"7","count":"30","start":"0","queryTerminal":"10000"}&type=query&tk=3b6e1ded5e34e4a985ce9167106c62a0';
            queryUrl = encodeURI(queryUrl);

            var param;
            param = {};
            $.post(queryUrl, param, reGeocoderSearch);
        }

        //POI搜索回调函数
        function reGeocoderSearch(result) {
            var data = eval("(" + result + ")");
            var searchAry = data.pois;
            if (searchAry == null) {
                //layer.open({
                //    title: '提示'
                //    , content: '未找到相关地点<br/>您可以检查输入是否正确或者输入其它词'
                //    , time: 5000
                //    , resize: false
                //                });
                //alert("未找到相关地点\r\n您可以检查输入是否正确或者输入其它词");
                return;
            }
            var length = searchAry.length;

            for (var i = 0; i < length; i++) {
                var sName = searchAry[i].name;
                var sAddress = searchAry[i].address;
                var lonlat = (searchAry[i].lonlat).split(" ");
                var lgtd = lonlat[0];
                var lttd = lonlat[1];
                var sPhone = searchAry[i].phone;
                var sHotPtId = searchAry[i].hotPointID;

                var imgPath = getHomeUrl() + "/Images/basemaps/hotball.gif";
                var entityObj = createHotPt(sName, lgtd, lttd, sAddress, sPhone, sHotPtId);

                if (i == 0) {
                    g_viewer.zoomTo(g_viewer.entities.getById(entityObj.id));
                    //flyToEntity2(entityObj);
                }
            }

            g_geocoder.searchText = "";
            $(".cesium-geocoder-input").val("");
            $(".cesium-geocoder-input").removeClass("cesium-geocoder-input-wide");
        }
        //清除当前的热点实体
        function clearHotPt() {
            var length = g_lastHotPt_entities.length;
            if (length == 0) {
                return;
            }

            for (var i = 0; i < length; i++) {
                g_viewer.entities.removeById(g_lastHotPt_entities[i].id);
            }

            g_lastHotPt_entities.splice(0, length);
        }

        var g_lastHotPt_entities = new Array();  //上一次搜索的热点实体对象数组
        //创建搜索的热点
        function createHotPt(sName, lgtd, lttd, sAddress, sRegion, sPhone, sType, sHotPtId) {
            //实体的可视距离，单位米
            var ddc = new Cesium.DistanceDisplayCondition(10, 200000)

            var imgPath = getHomeUrl() + "/Images/basemaps/hotball.gif";
            var entityObj = {
                id: sHotPtId,
                name: sName,
                show: true,
                description: sName + "$%" + sAddress + "$%" + sRegion + "$%" + sPhone + "$%" + sType,
                position: Cesium.Cartesian3.fromDegrees(lgtd, lttd, 0),
                label: {
                    text: sName,
                    scale: 1,
                    font: '17px sans-serif',
                    fillColor: Cesium.Color.MEDIUMSPRINGGREEN,
                    style: Cesium.LabelStyle.FILL_AND_OUTLINE,
                    outlineWidth: 2,
                    verticalOrigin: Cesium.VerticalOrigin.BOTTOM, //垂直方向以底部来计算标签的位置
                    pixelOffset: new Cesium.Cartesian2(0, -9),   //偏移量
                    distanceDisplayCondition: ddc
                },
                billboard: {
                    image: imgPath,
                    width: 40,
                    height: 28,
                    distanceDisplayCondition: ddc
                }
            };

            //g_viewer.entities.add(entityObj);
            g_lastHotPt_entities.push(g_viewer.entities.add(entityObj));

            return entityObj;
        }
        /* 搜索end */

        var g_lClick_xx;
        var g_lClick_yy;
        var g_lClick_hh;
        //重写鼠标单击事件
        var clickHandler = g_viewer.screenSpaceEventHandler.getInputAction(Cesium.ScreenSpaceEventType.LEFT_CLICK);
        g_viewer.screenSpaceEventHandler.setInputAction(
            function onLeftClick(movement) {
                //屏幕坐标
                var screenPt = new Cesium.Cartesian2(movement.position.x, movement.position.y);
                //世界坐标
                var carPt = g_viewer.scene.globe.pick(g_viewer.camera.getPickRay(screenPt), g_viewer.scene);
                var catG = g_viewer.scene.globe.ellipsoid.cartesianToCartographic(carPt);
                var xx = Cesium.Math.toDegrees(catG.longitude);
                var yy = Cesium.Math.toDegrees(catG.latitude);
                var hh = catG.height;

                g_lClick_xx = xx;
                g_lClick_yy = yy;
                g_lClick_hh = hh;

                if (g_bMeasure_Area)    //测量面积
                {
                    if (g_measureEntites_Ary.length == 0)   //当前还没有创建实体对象
                    {
                        g_measurePolygonPts_Ary.push(xx, yy);
                        g_measurePtNum = g_measurePtNum + 1;
                        var objPolyon = {
                            polygon: {
                                hierarchy: new Cesium.CallbackProperty(updateMeasurePolygonPts, false),
                                material: new Cesium.Color(1, 1, 0, 0.3)
                            }
                        }
                        g_measureEntites_Ary.push(g_viewer.entities.add(objPolyon));

                        var objLabel = {
                            position: new Cesium.CallbackProperty(updatePolygonCentroid, false),
                            label: {
                                text: new Cesium.CallbackProperty(updateMeasurePolygonArea, false),
                                font: "18px sans-serif",
                                style: Cesium.LabelStyle.FILL_AND_OUTLINE,
                                outlineWidth: 2
                            }
                        }
                        g_measureEntites_Ary.push(g_viewer.entities.add(objLabel));

                    }
                    else {
                        g_measurePolygonPts_Ary.push(xx, yy);
                        g_measurePtNum = g_measurePtNum + 1;
                    }

                }

                if (g_bMeasure_Length)    //测量长度
                {
                    if ($("#chkTerrain").prop("checked") == false)   //无地形时
                    {
                        hh = 0;
                        g_lClick_hh = 0;
                    }

                    if (g_measureEntites_Ary.length == 0) {
                        var objStart = {
                            position: Cesium.Cartesian3.fromDegrees(xx, yy, hh),
                            label: {
                                text: "起点",
                                font: '15px sans-serif',
                                style: Cesium.LabelStyle.FILL_AND_OUTLINE,
                                outlineWidth: 2
                            }
                        };

                        g_measureEntites_Ary.push(g_viewer.entities.add(objStart));

                        g_measureLinePts_Ary.push(xx, yy, hh);
                        g_measurePtNum = g_measurePtNum + 1;
                        var objLine = {
                            polyline: {
                                positions: new Cesium.CallbackProperty(updateMeasureLinePts, false),
                                material: Cesium.Color.YELLOW,
                                width: 2
                            }
                        }
                        g_measureEntites_Ary.push(g_viewer.entities.add(objLine));
                    }
                    else {
                        g_measureLinePts_Ary.push(xx, yy, hh);
                        g_measurePtNum = g_measurePtNum + 1;

                        var ptAryTmp = g_measureEntites_Ary[1].polyline.positions.getValue();

                        var sCPt = Cesium.Cartesian3.fromArray([ptAryTmp[ptAryTmp.length - 3].x, ptAryTmp[ptAryTmp.length - 3].y, ptAryTmp[ptAryTmp.length - 3].z]);
                        var eCPt = Cesium.Cartesian3.fromArray([ptAryTmp[ptAryTmp.length - 2].x, ptAryTmp[ptAryTmp.length - 2].y, ptAryTmp[ptAryTmp.length - 2].z]);
                        g_measureLength = g_measureLength + getLength(sCPt, eCPt);
                        var sLabelText;
                        if (g_measureLength > 1000) {
                            sLabelText = (g_measureLength / 1000).toFixed(1) + " 千米";
                        }
                        else {
                            sLabelText = g_measureLength + " 米";
                        }
                        var objLabel = {
                            position: Cesium.Cartesian3.fromDegrees(xx, yy, hh),
                            label: {
                                text: sLabelText,
                                font: '15px sans-serif',
                                style: Cesium.LabelStyle.FILL_AND_OUTLINE,
                                outlineWidth: 2
                            }
                        }
                        frmMeasureView.window.setMeasureResult("全长：" + sLabelText);
                        g_measureEntites_Ary.push(g_viewer.entities.add(objLabel));

                    }
                }

                // Pick a new feature
                var pickedFeature = g_viewer.scene.pick(movement.position);
                if (!Cesium.defined(pickedFeature)) {
                    clickHandler(movement);
                    return;
                }
                else {
                    if (pickedFeature instanceof Cesium.Cesium3DTileFeature) {
                        //var propertyNames = feature.getPropertyNames();
                    }
                    else {
                        //if (pickedFeature.id.id.substring(0,5) == "hotPt")
                        //{
                        //    return;
                        //}
                        var entityObj = g_viewer.entities.getById(pickedFeature.id.id);
                        if (entityObj == null) {
                            return;
                        }

                        var typename = "";
                        if (entityObj.sttp == "ZZ") {
                            typename = "水位站";
                        }
                        else if (entityObj.sttp == "ZQ") {
                            typename = "水文站";
                        }
                        else if (entityObj.sttp == "RR") {
                            typename = "水库水文站";
                        }
                        else {
                            typename = "雨量站";
                        }
                        var description = typename + "：" + entityObj.name;

                        if (entityObj.description == description && entityObj.sttp == 'ZQ') {
                            var index = $.modalOpenMax({
                                id: "Details",
                                title: "查看站点信息",
                                url: "/StationInfo/Details/index?stcd=" + entityObj.id,
                                width: "1200px",
                                height: "800px",
                                btn: null
                            });
                        }
                        else if (entityObj.sttp == "PP")
                        {
                            var index = $.modalOpenMax({
                                id: "Details",
                                title: "查看站点信息",
                                url: "/StationInfo/Details/rainStationInfo?stcd=" + entityObj.id,
                                width: "1200px",
                                height: "800px",
                                btn: null
                            });
                        }
                        else if (entityObj.sttp == "real_PP") {
                            $.modalOpen({
                                id: "Form",
                                title: "时段降雨过程",
                                //url: "/RealData/Rain/RainPeriodDetail?stcd=" + entityObj.id + "&sdate=&edate=" + entityObj.etm,
                                url: "/RealData/Rain/RainChart?stcd=" + entityObj.id.replace(entityObj.sttp+"_",'') + "&edate=" + entityObj.etm + "&stype=0",
                                width: "1000px",
                                height: "610px",
                                btn: null
                            });
                        } else if (entityObj.sttp == "real_ZZ") {
                            $.modalOpen({
                                id: "Form",
                                title: "河道最新水位变化过程",
                                //url: "/RealData/River/ChartRiver?stcd=" + entityObj.id + "&sdate=&edate=" + entityObj.tm,
                                url: "/RealData/River/ChartRiver?stcd=" + entityObj.id.replace(entityObj.sttp + "_", '') + "&edate=" + entityObj.tm + "&stype=0",
                                width: "1000px",
                                height: "610px",
                                btn: null
                            });
                        } else if (entityObj.sttp == "real_RR") {
                            $.modalOpen({
                                id: "Form",
                                title: "水库最新水位变化过程",
                                //url: "/RealData/Rsvr/ChartRsvr?stcd=" + entityObj.id + "&sdate=&edate=" + entityObj.tm,
                                url: "/RealData/Rsvr/ChartRsvr?stcd=" + entityObj.id.replace(entityObj.sttp + "_", '') + "&edate=" + entityObj.tm,
                                width: "1000px",
                                height: "610px",
                                btn: null
                            });
                        } else if (entityObj.sttp == "SS") {
                            $.modalOpen({
                                id: "Details",
                                title: "查看站点信息",
                                url: "/Base/Site/Details?id=" + entityObj.id,
                                width: "800px",
                                height: "560px",
                                btn: null
                            });
                        }
                        else if (entityObj.sttp == "Video") {
                            //window.open("/MapVideo/Camera/VideoInfo?stcd=" + entityObj.stcd, "_blank");
                            window.open("/MapVideo/Camera/VideoHKPTNew?stcd=" + entityObj.stcd, "_blank");
                            //$.modalOpen({
                            //    id: "Video",
                            //    title: "查看视频站点信息",
                            //    //url: "/MapVideo/Camera/Index?vname=" + entityObj.vname + "&vpwd=" + entityObj.vpwd + "&vip=" + entityObj.vip + "&vport=" + entityObj.vport,
                            //    url: "/MapVideo/Camera/VideoInfo?stcd=" + entityObj.stcd,
                            //    width: "1000px",
                            //    height: "560px",
                            //    btn: null
                            //});
                        }
                    }
                }

            },
            Cesium.ScreenSpaceEventType.LEFT_CLICK);


        //动态计算多边形的面积
        function updateMeasurePolygonArea(time, result) {
            var length = g_measurePolygonPts_Ary.length;
            length = length / 2;
            if (length > 2) {
                var ptsAry = new Array();
                for (var i = 0; i < length; i++) {
                    var ptAry = new Array();
                    ptAry[0] = g_measurePolygonPts_Ary[i * 2];
                    ptAry[1] = g_measurePolygonPts_Ary[i * 2 + 1];

                    ptsAry.push(ptAry);
                }

                var retVal = calculateArea(ptsAry);
                frmMeasureView.window.setMeasureResult("面积：" + retVal);

                return retVal;
            }
        }

        //动态计算多边形的质心点
        function updatePolygonCentroid(time, result) {
            var length = g_measurePolygonPts_Ary.length;
            length = length / 2;
            if (length > 2) {
                var ptsAry = new Array();
                for (var i = 0; i < length; i++) {
                    var objPt = new Object();
                    objPt.lng = g_measurePolygonPts_Ary[i * 2];
                    objPt.lat = g_measurePolygonPts_Ary[i * 2 + 1];

                    ptsAry.push(objPt);
                }
                var ptAry = getPolygonAreaCenter(ptsAry);
                //var ptAry = [g_measurePolygonPts_Ary[0], g_measurePolygonPts_Ary[1]];
                return Cesium.Cartesian3.fromDegrees(ptAry[0], ptAry[1]);
            }
        }

        var g_measurePolygonPts_Ary = new Array();  //多边形点数组
        var g_measurePtNum = 0;  //测量时点的个数
        //动态更新多边形的点
        function updateMeasurePolygonPts(time, result) {
            if (g_bMeasure_Area) {
                if (g_measurePtNum >= 2) {
                    g_measurePolygonPts_Ary[g_measurePtNum * 2] = g_move_xx;
                    g_measurePolygonPts_Ary[g_measurePtNum * 2 + 1] = g_move_yy;
                }
            }

            return Cesium.Cartesian3.fromDegreesArray(g_measurePolygonPts_Ary);
        }

        var g_measureLinePts_Ary = new Array();
        //更新线上的点
        function updateMeasureLinePts(time, result) {
            if (g_bMeasure_Length) {
                if (g_measurePtNum >= 1) {
                    g_measureLinePts_Ary[g_measurePtNum * 3] = g_move_xx;
                    g_measureLinePts_Ary[g_measurePtNum * 3 + 1] = g_move_yy;
                    g_measureLinePts_Ary[g_measurePtNum * 3 + 2] = g_move_hh;
                }
            }
            return Cesium.Cartesian3.fromDegreesArrayHeights(g_measureLinePts_Ary);

        }

        var g_move_xx;
        var g_move_yy;
        var g_move_hh;
        //GIS容器鼠标移动事件
        function onCesiumMouseMove(e) {
            //屏幕坐标
            var screenPt = new Cesium.Cartesian2(e.clientX, e.clientY);
            //世界坐标
            var carPt = g_viewer.scene.globe.pick(g_viewer.camera.getPickRay(screenPt), g_viewer.scene);
            var catG = g_viewer.scene.globe.ellipsoid.cartesianToCartographic(carPt);
            var xx = Cesium.Math.toDegrees(catG.longitude);
            var yy = Cesium.Math.toDegrees(catG.latitude);
            var hh = catG.height;

            g_move_xx = xx;
            g_move_yy = yy;
            if ($("#chkTerrain").prop("checked") == false)   //无地形时
            {
                g_move_hh = 0;
            }
            else {
                g_move_hh = hh;
            }

            //鼠标移动到热点上显示，热点的详细信息
            var pickedFeature = g_viewer.scene.pick(screenPt);
            if (Cesium.defined(pickedFeature)) {
                if (pickedFeature.id.length != null) {
                    if (pickedFeature.id[0].id.substr(0, 7) == 'real_PP' || pickedFeature.id[0].id.substr(0, 7) == 'real_RR') {
                        var sAry = (pickedFeature.id[0].description._value).split("$%");
                        var sShow = "";
                        for (var i = 0, len = sAry.length; i < len; i++) {
                            sShow += "<div>";
                            sShow += sAry[i];
                            sShow += "</div>";
                        }
                        $("#tooltip-content").html(sShow);
                        $("#tooltip-view").show();
                        var divX = e.clientX - $("#tooltip-view").width() / 2;
                        var divY = e.clientY - $("#tooltip-view").height() - 10;
                        $("#tooltip-view").css("transform", "translate3d(" + divX + "px," + divY + "px, 0)");
                    } 
                }
                if (pickedFeature.id.id.length > 5) {//视频监控里ID的长度是5，所以加此判断
                    if (pickedFeature.id.id.substring(0, 5) == "hotPt") {
                        //$("#tooltip-content").html(o)
                        var sAry = (pickedFeature.id.description._value).split("$%");
                        var sShow = "<div>";
                        sShow += "名称：" + sAry[0];
                        sShow += "</div>";
                        sShow += "<div>";
                        sShow += "地址：" + sAry[1];
                        sShow += "</div>";
                        sShow += "<div>";
                        sShow += "电话：" + sAry[3];
                        sShow += "</div>";
                        sShow += "</div>";
                        sShow += "<div>";
                        sShow += "区域：" + sAry[2];
                        sShow += "</div>";
                        sShow += "<div>";
                        sShow += "类别：" + sAry[4];
                        sShow += "</div>";
                        $("#tooltip-content").html(sShow);
                        $("#tooltip-view").show();
                        var divX = e.clientX - $("#tooltip-view").width() / 2;
                        var divY = e.clientY - $("#tooltip-view").height() - 10;
                        $("#tooltip-view").css("transform", "translate3d(" + divX + "px," + divY + "px, 0)")
                        //alert(pickedFeature.id.description);
                        //alert(pickedFeature.id.description);
                    } else {
                        if (pickedFeature.id.description != undefined) {
                            if (pickedFeature.id.id.substr(0, 7) == 'real_ZZ') {
                                return;
                            }
                            var sAry = (pickedFeature.id.description._value).split("$%");
                            var sShow = "";
                            for (var i = 0, len = sAry.length; i < len; i++) {
                                sShow += "<div>";
                                sShow += sAry[i];
                                sShow += "</div>";
                            }
                            $("#tooltip-content").html(sShow);
                            $("#tooltip-view").show();
                            var divX = e.clientX - $("#tooltip-view").width() / 2;
                            var divY = e.clientY - $("#tooltip-view").height() - 10;
                            $("#tooltip-view").css("transform", "translate3d(" + divX + "px," + divY + "px, 0)")
                        }
                    }
                }
                else {
                    $("#tooltip-content").empty();
                    $("#tooltip-view").hide();
                }
            } else {
                $("#tooltip-content").empty();
                $("#tooltip-view").hide();
            }

            //动态获取坐标
            if (g_viewer.scene.mode == Cesium.SceneMode.SCENE3D) {
                if ($("#chkTerrain").prop("checked") == true) {
                    $("#div_location_jwd").html("经度:" + xx + "  纬度:" + yy + "  高程:" + parseInt(catG.height) + "米");
                }
                else {
                    $("#div_location_jwd").html("经度:" + xx + "  纬度:" + yy);
                }
            }
            else {
                $("#div_location_jwd").html("");
            }
        }

        //鼠标移动事件，动态获取经纬度
        //var mouseMoveHandler = g_viewer.screenSpaceEventHandler.getInputAction(Cesium.ScreenSpaceEventType.MOUSE_MOVE);;
        //g_viewer.screenSpaceEventHandler.setInputAction(
        //    function (movement) {
        //        var carPt = g_viewer.golbe.scene.pickPosition(movement.endPosition);
        //        var catG = g_viewer.scene.globe.ellipsoid.cartesianToCartographic(carPt);
        //        var xx = Cesium.Math.toDegrees(catG.longitude);
        //        var yy = Cesium.Math.toDegrees(catG.latitude);

        //        //$("#div_location_jwd").html(movement.endPosition.x + "  " + event.clientX + "  " + movement.endPosition.y + "  " + event.clientY);
        //        //$("#div_location_jwd").html(event.clientX + "  " + event.clientY);

        //        $("#div_location_jwd").html("经度:" + xx + "  纬度:" + yy + "  " + event.clientX);
        //        //mouseMoveHandler(movement);
        //    },
        //    Cesium.ScreenSpaceEventType.MOUSE_MOVE
        //    );

        //屏蔽鼠标的左键双击实体对象或图层事件
        var doubleClickHandler = g_viewer.screenSpaceEventHandler.getInputAction(Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK);
        g_viewer.screenSpaceEventHandler.setInputAction(
            function (movement) {
                var pickedFeature = g_viewer.scene.pick(movement.position);
                //屏幕坐标
                var screenPt = new Cesium.Cartesian2(movement.position.x, movement.position.y);
                //世界坐标
                var carPt = g_viewer.scene.globe.pick(g_viewer.camera.getPickRay(screenPt), g_viewer.scene);
                var catG = g_viewer.scene.globe.ellipsoid.cartesianToCartographic(carPt);
                var xx = Cesium.Math.toDegrees(catG.longitude);
                var yy = Cesium.Math.toDegrees(catG.latitude);
                var hh = catG.height;
                if ($("#chkTerrain").prop("checked") == false)   //无地形时
                {
                    hh = 0;
                }

                if (g_bMeasure_Area) {
                    g_bMeasure_Area = false;
                    //g_measureEntites_Ary[0].polygon.hierarchy = Cesium.Cartesian3.fromDegreesArray(g_measurePolygonPts_Ary);
                }

                if (g_bMeasure_Length)  //当前测量长度
                {
                    g_bMeasure_Length = false;
                    g_viewer.entities.remove(g_measureEntites_Ary[g_measureEntites_Ary.length - 1]);
                    g_measureEntites_Ary.pop();
                    g_measureEntites_Ary[g_measureEntites_Ary.length - 1].label.text = "全长：" + g_measureEntites_Ary[g_measureEntites_Ary.length - 1].label.text;
                }
                if (!Cesium.defined(pickedFeature)) {
                    doubleClickHandler(movement);
                    return;
                }
            },
            Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK
        );



        var g_divLayer_mouseX, g_divLayer_mouseY;
        var g_divLayer_objX, g_divLayer_objY;
        var g_divLayer_isDowm = false;
        function mouseDown(div, e) {
            //var div = document.getElementById("divLayer");
            div.style.cursor = "move";
            g_divLayer_objX = div.offsetLeft;
            g_divLayer_objY = div.offsetTop;
            g_divLayer_mouseX = e.clientX;
            g_divLayer_mouseY = e.clientY;
            g_divLayer_isDowm = true;
        }
        function mouseMove(div, e) {
            //var div = document.getElementById("divLayer");
            var x = e.clientX;
            var y = e.clientY;
            if (g_divLayer_isDowm) {
                div.style.left = parseInt(g_divLayer_objX) + parseInt(x) - parseInt(g_divLayer_mouseX) + "px";
                div.style.top = parseInt(g_divLayer_objY) + parseInt(y) - parseInt(g_divLayer_mouseY) + "px";
                //var xx = parseInt(g_divLayer_objX) + parseInt(x) - parseInt(g_divLayer_mouseX);
                //var yy = parseInt(g_divLayer_objY) + parseInt(y) - parseInt(g_divLayer_mouseY);
                //$("#divLayer").css("transform", "translate3d(" + xx + "px," + yy + "px, 0)")
            }
        }
        function mouseUp(div, e) {
            if (g_divLayer_isDowm) {
                var x = e.clientX;
                var y = e.clientY;
                //var div = document.getElementById("divLayer");
                div.style.left = parseInt(g_divLayer_objX) + parseInt(x) - parseInt(g_divLayer_mouseX) + "px";
                div.style.top = parseInt(g_divLayer_objY) + parseInt(y) - parseInt(g_divLayer_mouseY) + "px";
                //var xx = parseInt(g_divLayer_objX) + parseInt(x) - parseInt(g_divLayer_mouseX);
                //var yy = parseInt(g_divLayer_objY) + parseInt(y) - parseInt(g_divLayer_mouseY);
                //$("#divLayer").css("transform", "translate3d(" + xx + "px," + yy + "px, 0)");
                div.style.cursor = "default";
                g_divLayer_isDowm = false;
            }
        }

        /*飞到对象位置*/
        //根据实体飞行到实体的位置
        function flyToEntity2(entityObj) {
            //定义一个检索的时间
            var jd = new Cesium.JulianDate();

            //获取该实体对象的坐标值
            var cat = entityObj.position.getValue(jd);
            var catG = g_viewer.scene.globe.ellipsoid.cartesianToCartographic(cat);
            var xx = Cesium.Math.toDegrees(catG.longitude);
            var yy = Cesium.Math.toDegrees(catG.latitude);
            g_viewer.camera.flyTo({
                destination: Cesium.Cartesian3.fromDegrees(xx, yy, 20000)
            });
        }

        //根据实体ID飞到实体的位置
        function flyToEntity(eId) {
            //获取一个实体对象
            var entityObj = g_viewer.entities.getById(eId);

            //定义一个检索的时间
            var jd = new Cesium.JulianDate();
            //获取该实体对象的坐标值
            var cat = entityObj.position.getValue(jd);
            var catG = g_viewer.scene.globe.ellipsoid.cartesianToCartographic(cat);
            var xx = Cesium.Math.toDegrees(catG.longitude);
            var yy = Cesium.Math.toDegrees(catG.latitude);
            g_viewer.camera.flyTo({
                destination: Cesium.Cartesian3.fromDegrees(xx, yy, 20000)
            });
            //g_viewer.flyTo(entityObj);
        }
        function flyToEntity1(eId) {
            //获取一个实体对象
            var entityObj = g_viewer.entities.getById(eId);

            //定义一个检索的时间
            var jd = new Cesium.JulianDate();

            //获取该实体对象的坐标值
            var cat = entityObj.position.getValue(jd);
            var catG = g_viewer.scene.globe.ellipsoid.cartesianToCartographic(cat);
            var xx = Cesium.Math.toDegrees(catG.longitude);
            var yy = Cesium.Math.toDegrees(catG.latitude);
            g_viewer.camera.flyTo({
                destination: Cesium.Cartesian3.fromDegrees(xx, yy, 2000)
            });
            //g_viewer.flyTo(entityObj);
        }
        /*飞到对象位置end*/
        /*加载模型 */
        function zhaShow() {
            var scene = g_viewer.scene;
            //旋转
            var m = Cesium.Transforms.northWestUpToFixedFrame(Cesium.Cartesian3.fromDegrees(91.096508, 29.644205, 0))
            //RotateZ为旋转角度，转为弧度再参与运算
            var m1 = Cesium.Matrix3.fromRotationZ(Cesium.Math.toRadians(191));
            //矩阵计算
            var modelMatrix = Cesium.Matrix4.multiplyByMatrix3(m, m1, m);
            var model = scene.primitives.add(Cesium.Model.fromGltf({
                url: '/ModelData/zha3.gltf',
                modelMatrix: modelMatrix,
                show: true,
                maximumScale: 20000,
                scale: 0.56
            }));
            g_viewer.camera.flyTo({
                destination: Cesium.Cartesian3.fromDegrees(91.096345, 29.644603, 1500)
            });
        }

        function zhaClose() {
            var scene = g_viewer.scene;
            scene.primitives.removeAll();
            flyToInitpos();
        }
        /*加载模型end */

        flyToInitpos();

        function sleep(n) { //n表示的毫秒数
            var start = new Date().getTime();
            while (true) if (new Date().getTime() - start > n) break;
        }
        moment.locale('zh-cn');
        //当前时间
        $("#spTime").text(moment().format("YYYY-M-D H:mm:ss"));
        setInterval(function () { $("#spTime").text(moment().format("YYYY-M-D H:mm:ss")); }, 1000);
        //预警信息
        function firstQuery() {//进入默认加载

            $.ajax({
                url: "/RealData/WatchWarn/WatchWarnData",
                dataType: "html",
                success: function (data, status, xhr) {
                    document.getElementById("yujing").innerHTML = data;
                    var s = data.indexOf('[');
                    var e = data.indexOf(']');
                    var objlists = data.substring(s, e + 1);
                    var ppstcds = '', zzstcds = '', rrstcds = '';
                    if (objlists.length > 0) {
                        for (var i = 0; i < objlists.length; i++) {
                            if (objlists[i].sttp == 'PP')
                                ppstcds += objlists[i].stcd + ",";
                            if (objlists[i].sttp == 'ZZ' || objlists[i].sttp == 'ZQ')
                                zzstcds += objlists[i].stcd + ",";
                            if (objlists[i].sttp == 'RR')
                                rrstcds += objlists[i].stcd + ",";
                        }
                    }
                    var region = "";
                    if (ppstcds.length > 0)//雨情
                        Pptn('P', 'New', ppstcds, '', '', '', region);
                    if (zzstcds.length > 0)//河道
                        Water("RvNew", zzstcds, region);
                    if (rrstcds.length > 0)//水库
                        Water("RsNew", rrstcds, region);
                }
            });

        }
        function showDetail(date, sn, tn, sp, qj) {
            var str = document.getElementById('spTime').innerText;
            var parms = "date=" + date + "&sname=" + sn + "&tname=" + tn + "&sttp=" + sp + "&qjfz=" + qj;

            $.ajax({
                url: "/RealData/WatchWarn/GetWatchWarnDetailData",
                data: parms,
                type: "get",
                dataType: "html",
                async: false,
                success: function (data) {
                    ReQuery(data);
                }
            });
        }
        function ReQuery(result) {
            if (result == null) {
                document.getElementById('divdetail').innerHTML = "暂未获得数据，请稍候重试";
                return;
            }
            else if (result.substr(0, 1) == "[") {
                var obj = eval('(' + result + ')');
                var str = "<table id=\"tblDetail\" border=\"0\" align=\"center\" width=\"100%\" cellpadding=\"2\" cellspacing=\"0\">";

                var c_t = 0;
                var sn, tn, zs, fc;
                var strtm = document.getElementById('spTime').innerText;
                strtm = strtm.substring(0, strtm.lastIndexOf(':'));
                for (var i = 0; i < obj.length; i++) {
                    if (i == 0) {
                        sn = obj[i].sn;
                        tn = obj[i].tn;
                        zs = obj[i].zs;
                        fc = obj[i].fc;
                        pointlist = obj[i].xmax + "," + obj[i].ymax + ";" + obj[i].xmim + "," + obj[i].ymin + ";";
                        pname = obj[i].qj;
                        str += "<tr><th align=\"center\" nowrap valign=\"top\">区间</th><th align=\"center\" nowrap valign=\"top\">总站数</th><th align=\"center\" nowrap valign=\"top\" colspan=\"3\">" + tn + "</th></tr>";
                    }
                    else {
                        sm = obj[i].stnm;
                        c_t += 1;
                    }
                }
                str += "<tr><td align=\"left\" nowrap valign=\"top\"><a href=\"javascript:showSec_qy();\"><font color=\"" + fc + "\">" + sn + "</font></a></td><td align=\"center\" nowrap valign=\"top\"><font color=\"" + fc + "\">" + zs + "</font></td><td align=\"center\" nowrap valign=\"top\" colspan=\"3\"><font color=\"" + fc + "\">" + c_t + "</font></td></tr></table>";
                document.getElementById('divdetail').innerHTML = str; //Show_UnitPostion();
            }
            else
                document.getElementById('divdetail').innerHTML = result;
        }
        var ManageDetails = function (obj, strpp) {
            if (obj.checked) {
                var divpa = document.getElementById('div_info');
                var lis = divpa.getElementsByTagName('tr');
                for (var i = 0; i < lis.length; i++) {
                    if (lis[i].title == strpp) {
                        lis[i].style.display = "";
                    }
                }
            }
            else {
                var divpa = document.getElementById('div_info');
                var lis = divpa.getElementsByTagName('tr');
                for (var i = 0; i < lis.length; i++) {
                    if (lis[i].title == strpp) {
                        lis[i].style.display = "none";
                    }
                }
            }
            if (document.getElementById('divdetail').innerHTML != "")
                document.getElementById('divdetail').innerHTML = "";
        };
        //清除图层管理中指定类型的实体
        var clean_LayerEntity = function (otype) {
            var length = 0;
            if (otype == "ZZ" || otype == "ZQ") {
                G_ShowEntitys(g_layer_Entitys_River, false);                
            } else if (otype == "RR") {
                G_ShowEntitys(g_layer_Entitys_Rsvr, false);    
            } else if (otype == "PP") {
                G_ShowEntitys(g_layer_Entitys_Rain, false); 
            } else if (otype == "GL") {
                G_ShowEntitys(g_layer_Entitys_GL, false);
            } else if (otype == "ZL") {
                G_ShowEntitys(g_layer_Entitys_ZL, false);
            } else if (otype == "LINE1") {
                G_ShowEntitys(g_layer_Entitys_Line1, false);
                G_ShowEntitys(g_layer_Entitys_Polygon1, false);
            } else if (otype == "LINE2") {
                G_ShowEntitys(g_layer_Entitys_Line2, false);
                G_ShowEntitys(g_layer_Entitys_Polygon2, false);
            } else if (otype == "LINE3") {
                G_ShowEntitys(g_layer_Entitys_Line3, false);
                G_ShowEntitys(g_layer_Entitys_Polygon3, false);
            } else if (otype == "QY") {
                G_ShowEntitys(g_layer_Entitys_QY, false);
            }
        };
        var g_treeData = new Array();   //图层树数据
        //初始化树的回调函数
        function reInitTree(result) {
            var data = eval("(" + result + ")");
            var t_sName = window.parent.pp_sysName;
            var rootName = t_sName.substr(0, t_sName.indexOf('局') + 1);
            g_treeData = [{ "id": -1, "text": rootName, "children": [] }];

            var jsonMenu = [{ "havechild": "0", "index": "0", "type": "ZZ", "text": "河道水文站" },
            { "havechild": "1", "index": "1", "type": "RR", "text": "水库水文站" },
            { "havechild": "0", "index": "2", "type": "PP", "text": "雨量站" }];
            var length = jsonMenu.length;
            var rowLength = data.length;
            for (var i = 0; i < length; i++) {
                var objTmp = {};
                objTmp.text = jsonMenu[i].text;
                objTmp.id = jsonMenu[i].index;
                objTmp.children = new Array();

                for (var j = 0; j < rowLength; j++) {
                    var objTmp2 = {};

                    if (jsonMenu[i].type == "ZZ") {
                        if (data[j].STTP == "ZZ" || data[j].STTP == "ZQ") {
                            objTmp2.id = data[j].STCD;
                            objTmp2.text = data[j].STNM;
                            objTmp.children.push(objTmp2);
                            g_layer_Entitys_River.push(createLabel(data[j].STNM, data[j].STCD, data[j].LGTD, data[j].LTTD, getHomeUrl() + "/Images/prm/sw.png", data[j].STTP, data[j].ANGLE));
                        }
                    }
                    else {
                        if (jsonMenu[i].type == data[j].STTP) {
                            objTmp2.id = data[j].STCD;
                            objTmp2.text = data[j].STNM;

                            objTmp.children.push(objTmp2);
                            var imgUrl;
                            if (data[j].STTP == "RR") {
                                imgUrl = getHomeUrl() + "/Images/prm/sk.png";
                                g_layer_Entitys_Rsvr.push(createLabel(data[j].STNM, data[j].STCD, data[j].LGTD, data[j].LTTD, imgUrl, jsonMenu[i].type, 0));
                            }
                            else {
                                imgUrl = getHomeUrl() + "/Images/prm/rain1.png";
                                g_layer_Entitys_Rain.push(createLabel(data[j].STNM, data[j].STCD, data[j].LGTD, data[j].LTTD, imgUrl, jsonMenu[i].type, 0));
                            }
                        }
                    }
                }
                g_treeData[0].children.push(objTmp);
            }
            g_treeData[0].children.push({ "havechild": "0", "index": "3", "type": "GL", "text": "黄河干流", "checked": true });
            g_treeData[0].children.push({ "havechild": "0", "index": "4", "type": "LINE1", "text": "支流1", "checked": true });
            g_treeData[0].children.push({ "havechild": "0", "index": "5", "type": "LINE2", "text": "支流2", "checked": true });
            g_treeData[0].children.push({ "havechild": "0", "index": "6", "type": "LINE3", "text": "支流3", "checked": true });
            g_treeData[0].children.push({ "havechild": "0", "index": "7", "type": "QY", "text": "区域边界", "checked": true });
            //g_treeData[0].children.push({ "havechild": "0", "index": "5", "type": "DF", "text": "堤防" });
            //g_treeData[0].children.push({ "havechild": "0", "index": "6", "type": "LSS", "text": "行政区划" });
            //g_treeData[0].children.push({ "havechild": "0", "index": "7", "type": "ZZQ", "text": "自治区" });
            //g_treeData[0].children.push({ "havechild": "0", "index": "8", "type": "ZHA", "text": "3号闸" });
            //g_viewer.layers
            $('#infoTree').tree({
                data: g_treeData,
                checkbox: true,
                onClick: function (node) {
                    if (node.children == null) {
                        flyToEntity(node.id);
                    }
                },
                onCheck: function (node, checked) {
                    onTreeNodeCheckedChange(node, checked);
                }
            });
        }

        //树节点复选框状态变化事件
        function onTreeNodeCheckedChange(node, checked) {
            if (node.children == null) {
                if (node.type == "ZL") {
                    if (checked)
                        LoadLine_ZL();
                    else
                        clean_LayerEntity("ZL");
                } else if (node.type == "LINE1") {
                    if (checked)
                        LoadLine_line1();
                    else
                        clean_LayerEntity("LINE1");
                } else if (node.type == "LINE2") {
                    if (checked)
                        LoadLine_line2();
                    else
                        clean_LayerEntity("LINE2");
                }
                else if (node.type == "LINE3") {
                    if (checked)
                        LoadLine_line3();
                    else
                        clean_LayerEntity("LINE3");
                } else if (node.type == "GL") {
                    if (checked)
                        LoadLine_GL();
                    else
                        clean_LayerEntity("GL");
                } else if (node.type == "QY") {
                    if (checked)
                        LoadAreaBoundary();
                    else
                        clean_LayerEntity("QY");
                }
                else if (node.type == "SK")
                    rsvr.show = checked;
                else if (node.type == "DF")
                    df.show = checked;
                else if (node.type == "LSS")
                    lss.show = checked;
                else if (node.type == "ZZQ")
                    pbj.show = checked;
                else if (node.type == "ZHA") {
                    if (checked == true)
                        zhaShow();
                    else
                        zhaClose();
                }
                else {
                    //获取当前实体对象
                    var entityObj = g_viewer.entities.getById(node.id);
                    entityObj.show = checked;
                }
            }
            else {
                var length = node.children.length
                for (var i = 0; i < length; i++) {
                    onTreeNodeCheckedChange(node.children[i], node.children[i].checked);
                }
            }
        }

        //初始化信息树
        function initTree() {
            var param;
            param = {};
            $.post("/Details/GetStationList", param, reInitTree);

            //for (var key in jsonMenu) {
            //    var obj = {};
            //    var node = jsonMenu[key];
            //    obj.text = node.text;
            //    obj.id = node.index;
            //    debugger;
            //    //var param;
            //    //param = { sttp: "'ZZ'" };
            //    //$.post("/Home/GetStations", param, reInitTree);

            //    g_treeData[0].children.push(obj);
            //}
        }




        //创建测站实体
        function createLabel(stnm, stcd, lgtd, lttd, imgPath, type, angle) {
            if (angle == null)
                angle = 0;
            var typename = "";
            //实体的可视距离，单位米
            var ddc = new Cesium.DistanceDisplayCondition(g_lable_near, g_lable_far)
            var lableddc = new Cesium.DistanceDisplayCondition(g_lable_near, g_lable_far / 85);
            if (type == "ZZ") {
                typename = "水位站";
            }
            else if (type == "ZQ")
            {
                typename = "水文站";
            }
            else if (type == "RR") {
                typename = "水库水文站";
            }
            else
                typename = "雨量站";
            //console.log(stnm + "  " + angle);
            if (g_viewer.entities.getById(stcd) == undefined) {
                g_viewer.entities.add({
                    id: stcd,
                    name: stnm,
                    description: typename + "：" + stnm,
                    sttp: type,
                    show: false,
                    position: Cesium.Cartesian3.fromDegrees(lgtd, lttd, 0),
                    label: {
                        text: stnm,
                        scale: 1,
                        font: '14px sans-serif',
                        fillColor: Cesium.Color.AQUA,
                        style: Cesium.LabelStyle.FILL_AND_OUTLINE,
                        outlineWidth: 2,
                        verticalOrigin: Cesium.VerticalOrigin.BOTTOM, //垂直方向以底部来计算标签的位置
                        pixelOffset: new Cesium.Cartesian2(0, -9),   //偏移量
                        distanceDisplayCondition: lableddc
                    },
                    billboard: {
                        image: imgPath,
                        width: 12,
                        rotation: Cesium.Math.toRadians(angle),
                        height: 12,
                        distanceDisplayCondition: ddc
                    }
                });
            }
            return stcd;
        }

        function getHomeUrl() {
            var strFullPath = window.document.location.href;
            var strPath = window.document.location.pathname;
            var pos = strFullPath.indexOf(strPath);
            var prePath = strFullPath.substring(0, pos);
            var postPath = strPath.substring(0, strPath.substr(1).indexOf('/') + 1);

            return prePath;
        }


        function Pptn(rshow, rtype, stcd, sdate, edate, tentype, region) {
            $("#legend").show();
            $.ajax({
                //url: "/RealData/Rain/RainNew",
                url: "/RealData/Rain/GetLatestRainNewData",
                //data: { stype: rtype, stcd: stcd, sdate: sdate, edate: edate, tentype: tentype, region: region },
                dataType: "json",
                success: function (data, status, xhr) {
                    MakeReportReal('Rain', data);
                    $(".bo_iimg1").click();
                    $(".bo_topicon").click();
                    //console.log(data.rows)
                    createQueryLable('1', data.rows, 'SD', 'P');
                }
            });
        }
        function Water(rtype, stcd, region) {
            //if (rtype.split('|')[0] == "New") {
            $.ajax({
                url: "/RealData/River/GetLatestRiverData",
                //data: { stcd: stcd, region: region },
                dataType: "json",
                success: function (data, status, xhr) {
                    MakeReportReal('River', data);
                    createQueryLable('2', data.rows);
                }
            });
            $.ajax({
                url: "/RealData/Rsvr/GetLatestRsvrData",
                //data: { stcd: stcd, region: region },
                dataType: "json",
                success: function (data, status, xhr) {
                    MakeReportReal('Rsvr', data);
                    createQueryLable('3', data.rows);
                }
            });
        }

        //var htmlOverlay = document.getElementById('ylimg');
        //var scratch = new Cesium.Cartesian2();
        //viewer.scene.preRender.addEventListener(function () {
        //    var position = Cesium.Cartesian3.fromDegrees(113.8055628136, 22.44247382348, 50.0);
        //    var canvasPosition = viewer.scene.cartesianToCanvasCoordinates(position, scratch);
        //    if (Cesium.defined(canvasPosition)) {
        //        htmlOverlay.style.top = canvasPosition.y + 'px';
        //        htmlOverlay.style.left = canvasPosition.x + 'px';
        //    }
        //});

        function createQueryLable(stype, data, rtype, rshow) {
            //var lableddc = new Cesium.DistanceDisplayCondition(g_lable_near, g_lable_far * 0.05);
            var lableddc = new Cesium.DistanceDisplayCondition(0, 0.1);
            var ddc = new Cesium.DistanceDisplayCondition(g_lable_near, g_lable_far);
            var location, imgSrc = "", graphic, sdesc, sName = "", sTm = "";
            if (stype == '1') {//雨量
                imgSrc = getHomeUrl() + "/images/prm/yli.gif";
                var sty = "";
                if (rtype == "SD" || rtype == "Day")
                    sty = "1";
                else
                    sty = "2";
                if (rshow == "X" || rshow == "M") {//等值线//等值面
                    Surface(data, rshow);
                } else {//其他
                    $.each(data, function (i, item) {
                        //if (item.TM != null) {
                        //    sTm = "时间：" + item.TM;
                        //} else {
                        //    sTm = "时间：" + item.STM + "至" + item.ETM;
                        //}
                        sTm = "时间：" + item.STM + "至" + item.ETM;
                        //sName = item.STNM + ":" + item.DRP;

                        sName = ((item.value == null || item.value == 0) ? "" : parseFloat(item.value).toFixed(2) + " "); //item.STNM + ":" +
                        //imgSrc = getImageRainCircle(item.DRP);
                        imgSrc = getImageRainCircle(item.value);

                        if (!item.value) {
                            return true;
                        }
                        var entityObj;
                        if (rshow == "P") {
                            entityObj = {
                                id: "real_PP_" + item.STCD,
                                sttp: "real_PP",
                                stm: item.STM,
                                //etm: (item.TM != null ? item.TM : item.ETM),
                                etm: item.ETM,
                                name: item.STNM,
                                show: true,
                                description: "站名：" + item.STNM + "$%" + sTm + "$%累计雨量：" + item.value + "(mm)",
                                position: Cesium.Cartesian3.fromDegrees(item.x, item.y, 0),
                                label: {
                                    text: sName,
                                    scale: 1,
                                    font: '14px sans-serif',
                                    fillColor: Cesium.Color.BLACK,//new Cesium.Color(241 / 255, 1, 33 / 255, 1), // Cesium.Color.MEDIUMSPRINGGREEN,
                                    style: Cesium.LabelStyle.FILL,//_AND_OUTLINE,
                                    //outlineWidth: 2,
                                    showBackground: true,
                                    backgroundColor: new Cesium.Color(1, 1, 1, 0.7),
                                    verticalOrigin: Cesium.VerticalOrigin.BOTTOM, //垂直方向以底部来计算标签的位置
                                    pixelOffset: new Cesium.Cartesian2(0, -9),   //偏移量
                                    distanceDisplayCondition: lableddc
                                },
                                billboard: {
                                    image: imgSrc,//getImageRain(item.WTH, item.DRP),
                                    width: 10,
                                    height: 10,
                                    distanceDisplayCondition: getImageRainDDC(item.value)
                                }/*,*/
                                //ellipsoid: {
                                //    radii: new Cesium.Cartesian3(1600.0, 1600.0, 1600.0),
                                //    material: Cesium.Color.fromRandom({ alpha: 1.0 }),
                                //    distanceDisplayCondition: ddc*10
                                //}
                            };
                        } else if (rshow == "S") {
                            entityObj = {
                                id: "real_PP_" + item.STCD,
                                sttp: "real_PP",
                                stm: item.STM,
                                etm: (item.TM != null ? item.TM : item.ETM),
                                name: item.STNM,
                                show: true,
                                description: "站名：" + item.STNM + "$%" + sTm + "$%累计雨量：" + item.DRP + "(mm)",
                                position: Cesium.Cartesian3.fromDegrees(item.LGTD, item.LTTD, 0),
                                label: {
                                    text: sName,
                                    scale: 1,
                                    font: '14px sans-serif',
                                    fillColor: new Cesium.Color(241 / 255, 1, 33 / 255, 1), // Cesium.Color.MEDIUMSPRINGGREEN,
                                    style: Cesium.LabelStyle.FILL_AND_OUTLINE,
                                    outlineWidth: 2,
                                    verticalOrigin: Cesium.VerticalOrigin.BOTTOM, //垂直方向以底部来计算标签的位置
                                    pixelOffset: new Cesium.Cartesian2(0, -9),   //偏移量
                                    distanceDisplayCondition: ddc
                                }
                            };
                        }
                        //if (g_viewer.entities.getById(entityObj.id) != undefined)
                        //    g_viewer.entities.removeById(entityObj.id);
                        //g_viewer.entities.add(entityObj);//g_PPtn_entities.push(g_viewer.entities.add(entityObj));
                        if (g_realData_Datasource.entities.getById(entityObj.id) != undefined)
                            g_realData_Datasource.entities.removeById(entityObj.id);
                        g_realData_Datasource.entities.add(entityObj);
                        g_RealData.push(entityObj.id);
                    });
                }
            } else if (stype == '2') {//河道
                //imgSrc = getHomeUrl() + "/images/prm/sw.png";
                var stcds = "40103400,40103900,40104000,40104150";
                imgSrc = getHomeUrl() + "/images/prm/sw.gif";
                var prefix = "real_ZZ_";
                //console.log(data);
                $.each(data, function (i, item) {
                    if (item.Z || item.Q) {
                        sTm = "站名：" + item.STNM;
                        sName = item.STNM;
                        if (item.TM != null) {
                            //sTm += "$%时间：" + item.TM;
                            sTm += "\r\n时间：" + com.formatDDHHMM(item.TM);
                            if (item.Z) {
                                //sTm += "$%水位：" + item.Z + "(m)";
                                sTm += "\r\n水位：" + item.Z + "(m)";

                            }
                            if (item.Q) {
                                //sTm += "$%流量：" + item.Q + "(m3/s)";
                                sTm += "\r\n流量：" + item.Q + "(m3/s)";
                                sName += "：" + item.Q;
                            }
                        }
                        var angle = 0;
                        if (item.ANGLE)
                            angle = item.ANGLE;
                        var entityObj;
                        if (stcds.indexOf(item.STCD) >= 0) {//包含站点
                            var tlabel = item.STNM + ":" + com.formatDDHHMM(item.TM) + "\n水位：" + item.Z + "\n流量：" + item.Q;
                            entityObj = MakeEntity(prefix, item, "real_ZZ", sTm, tlabel, imgSrc, ddc, ddc, angle, Cesium.HorizontalOrigin.LEFT, Cesium.VerticalOrigin.CENTER, 12);
                        }
                        else {
                            //var t_ddc = new Cesium.DistanceDisplayCondition(g_lable_near, g_lable_far * 0.2);
                            var t_ddc = new Cesium.DistanceDisplayCondition(0, 0.1);
                            entityObj = MakeEntity(prefix, item, "real_ZZ", sTm, sName, imgSrc, t_ddc, lableddc, angle, Cesium.HorizontalOrigin.RIGHT, Cesium.VerticalOrigin.TOP, -12);
                            //entityObj = MakeEntity(prefix, item, "real_ZZ", sTm, sName, imgSrc, null, null, angle, Cesium.HorizontalOrigin.RIGHT, Cesium.VerticalOrigin.TOP, -12);
                        }
                        //if (g_viewer.entities.getById(entityObj.id) != undefined)
                        //    g_viewer.entities.removeById(entityObj.id);
                        //g_viewer.entities.add(entityObj);//g_PPtn_entities.push(g_viewer.entities.add(entityObj));
                        if (g_realData_Datasource.entities.getById(entityObj.id) != undefined)
                            g_realData_Datasource.entities.removeById(entityObj.id);
                        g_realData_Datasource.entities.add(entityObj);
                        g_RealData.push(entityObj.id);
                    }
                });
            } else if (stype == '3') {//水库
                imgSrc = getHomeUrl() + "/images/prm/sk.png";
                var prefix = "real_RR_";
                //imgSrc = getHomeUrl() + "/images/prm/sk.gif";
                $.each(data, function (i, item) {
                    sTm = "站名：" + item.STNM;
                    sName = item.STNM;
                    //console.log(item.STCD + "--" + item.STNM + "--RR");
                    if (item.TM != null) {
                        sTm += "$%时间：" + item.TM;

                        if (item.RWPTN)
                            sTm += "$%水位：" + item.RZ + Rwtn(item.RWPTN);
                        else
                            sTm += "$%水位：" + item.RZ + "(m)";
                        if (item.INQ)
                            sTm += "$%入库流量：" + item.INQ + "(m3/s)";
                        if (item.OTQ)
                            sTm += "$%出库流量：" + item.OTQ + "(m3/s)";
                        if (item.W)
                            sTm += "$%蓄量：" + item.W + "(百万m3)";
                        sName += "：" + item.W;
                    }
                    var entityObj = MakeEntity(prefix, item, "real_RR", sTm, sName, imgSrc, ddc, lableddc, 0, Cesium.HorizontalOrigin.LEFT, Cesium.VerticalOrigin.BOTTOM, 12);
                    //if (g_viewer.entities.getById(entityObj.id) != undefined)
                    //    g_viewer.entities.removeById(entityObj.id);
                    //g_viewer.entities.add(entityObj); //g_PPtn_entities.push(g_viewer.entities.add(entityObj));
                    if (g_realData_Datasource.entities.getById(entityObj.id) != undefined)
                        g_realData_Datasource.entities.removeById(entityObj.id);
                    g_realData_Datasource.entities.add(entityObj);
                    g_RealData.push(entityObj.id);
                });
            }
        }
        function Rwtn(code) {
            var str = "";
            switch (code) {
                case "4":
                    str = "↓";
                    break;
                case "5":
                    str = "↑";
                    break;
                case "6":
                    str = "-";
                    break;
                default:
                    break;
            }
            return str;
        }
        //数据查询创建图标
        function MakeEntity(prefix,item, sType, sTm, sName, imgSrc, ddc, lddc, angle, hOrigin, vOrigin, pixleft) {
            var entityObj = {
                id: prefix+item.STCD,
                sttp: sType,
                tm: item.TM,
                name: item.STNM,
                show: true,
                description: sTm,
                position: Cesium.Cartesian3.fromDegrees(item.LGTD, item.LTTD, 0),
                label: {
                    text: sName,
                    scale: 1,
                    font: '14px sans-serif',
                    fillColor: Cesium.Color.BLACK,// new Cesium.Color(241 / 255, 1, 33 / 255, 1), // Cesium.Color.MEDIUMSPRINGGREEN,
                    style: Cesium.LabelStyle.FILL,//_AND_OUTLINE,
                    //outlineColor: new Cesium.Color(1 / 255, 122/255, 226 / 255, 1),
                    //outlineWidth: 2,
                    showBackground: true,
                    backgroundColor: new Cesium.Color(1, 1, 1, 0.7),//new Cesium.Color(99/255, 182/255,250/255, 1),
                    horizontalOrigin: hOrigin,
                    verticalOrigin: vOrigin,//Cesium.VerticalOrigin.BOTTOM, 垂直方向以底部来计算标签的位置
                    pixelOffset: new Cesium.Cartesian2(pixleft, 0),   //偏移量
                    distanceDisplayCondition: lddc
                },
                billboard: {
                    image: imgSrc,
                    width: 12,
                    height: 12,
                    rotation: Cesium.Math.toRadians(angle),
                    horizontalOrigin: hOrigin,
                    verticalOrigin: vOrigin,
                    distanceDisplayCondition: ddc
                }
            };
            return entityObj;
        }
        function MakeReportReal(rtype, data) {
            if (rtype === "Rain") {
                //$('#tab_Rain').datagrid({
                //    singleSelect: true,
                //    collapsible: true,
                //    striped: true,
                //    rownumbers: false,
                //    //pagination: true,
                //    //pagePosition: 'bottom',
                //    //pageSize: 20,
                //    data: data,
                //    //loadMsg: '数据加载中,请稍后……',
                //    columns: [[
                //        {
                //            field: 'STNM', title: '站名', width: '35%', align: 'center', formatter: function (v, row) {
                //                return "<a onclick='flyToEntity(" + row.STCD + ")'>" + v + "</a>";
                //            }
                //        },
                //        { field: 'TM', title: '时间', width: '30%', align: 'center', formatter: com.formatDDHHMM },
                //        {
                //            field: 'DRP', title: '雨量', width: '20%', halign: 'center', align: 'right', formatter: function (v) {
                //                return v;//toDecimal(v, 2);
                //            }
                //        },
                //        {
                //            field: 'WTH', title: '天气', width: '15%', align: 'center', formatter: function (v) {
                //                if (v == 7) {
                //                    return '雨';
                //                }
                //                if (v == 8) {
                //                    return '阴';
                //                }

                //                if (v == 9) {
                //                    return '晴';
                //                }

                //                return '';
                //            }
                //        }//,
                //        //{
                //        //    field: 'Q', title: '流量', width: '25%', halign: 'center', align: 'right', formatter: function (v) {
                //        //        return SaveThreeN(v, 3);
                //        //    }
                //        //}
                //    ]],
                //    onLoadSuccess: function () {
                //    }
                //});


                $('#tab_Rain').datagrid({
                    singleSelect: true,
                    collapsible: true,
                    striped: true,
                    rownumbers: false,
                    //pagination: true,
                    //pagePosition: 'bottom',
                    //pageSize: 20,
                    data: data,
                    //loadMsg: '数据加载中,请稍后……',
                    columns: [[
                        {
                            field: 'STNM', title: '站名', width: '35%', align: 'center', formatter: function (v, row) {
                                return "<a onclick='flyToEntity(" + row.STCD + ")'>" + v + "</a>";
                            }
                        },
                        { field: 'ETM', title: '时间', width: '35%', align: 'center', formatter: com.formatDDHHMM },
                        { field: 'value', title: '降雨量', width: '30%', align: 'right' }
                    ]],
                    onLoadSuccess: function () {
                    }
                });
            } else if (rtype === "River") {
                //console.log(data);
                //$('#tab_River').text(data);
                $('#tab_River').datagrid({
                    singleSelect: true,
                    collapsible: true,
                    striped: true,
                    rownumbers: false,
                    data: data,
                    loadMsg: '数据加载中,请稍后……',
                    columns: [[
                        {
                            field: 'STNM', title: '站名', width: '30%', align: 'center', formatter: function (v, row) {
                                return "<a onclick='flyToEntity(" + row.STCD + ")'>" + v + "</a>";
                            }
                        },
                        { field: 'TM', title: '时间', width: '30%', align: 'center', formatter: com.formatDDHHMM },
                        {
                            field: 'Z', title: '水位', width: '23%', halign: 'center', align: 'right', formatter: function (v, row) {
                                var str = "";
                                switch (row.WPTN) {
                                    case '4':
                                        str = "<font color='green'>↓</font>";
                                        break;
                                    case '5':
                                        str = "<font color='red'>↑</font>";
                                        break;
                                    case '6':
                                        str = "-";
                                        break;
                                    default:
                                        str = row.WPTN;
                                        break;
                                }
                                return v + str;//toDecimal(v, 2) + str;
                            }
                        },
                        {
                            field: 'Q', title: '流量', width: '17%', align: 'center', formatter: function (v) {
                                return v;//SaveThreeN(v, 3);
                            }
                        }
                    ]],
                    onLoadSuccess: function () {
                    }
                });
            } else {
                $('#tab_Rsvr').datagrid({
                    singleSelect: true,
                    collapsible: true,
                    striped: true,
                    rownumbers: false,
                    data: data,
                    //loadMsg: '数据加载中,请稍后……',
                    columns: [[
                        {
                            field: 'STNM', title: '站名', width: '30%', align: 'center', formatter: function (v, row) {
                                return "<a onclick='flyToEntity(" + row.STCD + ")'>" + v + "</a>";
                            }
                        },
                        { field: 'TM', title: '时间', width: '30%', align: 'center', formatter: com.formatDDHHMM },
                        {
                            field: 'RZ', title: '水位', width: '23%', halign: 'center', align: 'right', formatter: function (v, row) {
                                var str = "";
                                switch (row.RWPTN) {
                                    case '4':
                                        str = "<font color='green'>↓</font>";
                                        break;
                                    case '5':
                                        str = "<font color='red'>↑</font>";
                                        break;
                                    case '6':
                                        str = "-";
                                        break;
                                    default:
                                        str = row.RWPTN;
                                        break;
                                }
                                return v + str;//toDecimal(v, 2) + str;
                            }
                        },
                        {
                            field: 'W', title: '蓄量', width: '17%', align: 'center', formatter: function (v) {
                                return v;//SaveThreeN(v, 3);
                            }
                        }
                    ]],
                    onLoadSuccess: function () {
                    }
                });
            }
        }
        //创建视频监控站点
        function createVideoLable(data) {
            var ddc = new Cesium.DistanceDisplayCondition(g_lable_near, g_lable_far);
            var imgSrc = "", graphic, sdesc, sName = "";
            $.each(data, function (i, item) {
                sName = item.Name;
                var entityObj;
                entityObj = {
                    id: "video_"+item.ID,
                    sttp: 'Video',
                    name: sName,
                    show: true,
                    description: "站名：" + item.Name,
                    position: Cesium.Cartesian3.fromDegrees(item.LGTD, item.LTTD, 0),
                    stcd: item.STCD,
                    //vname: item.USERNAME,
                    //vpwd: item.PASSWORD,
                    //vip: item.IP,
                    //vport: item.PORT,
                    label: {
                        text: sName,
                        scale: 1,
                        font: '14px sans-serif',
                        fillColor: new Cesium.Color(241 / 255, 1, 33 / 255, 1), // Cesium.Color.MEDIUMSPRINGGREEN,
                        style: Cesium.LabelStyle.FILL_AND_OUTLINE,
                        outlineWidth: 2,
                        verticalOrigin: Cesium.VerticalOrigin.BOTTOM, //垂直方向以底部来计算标签的位置
                        pixelOffset: new Cesium.Cartesian2(0, -9),   //偏移量
                        distanceDisplayCondition: ddc
                    },
                    billboard: {
                        image: getHomeUrl() + "/images/prm/bz.gif",
                        width: 17,
                        height: 23,
                        distanceDisplayCondition: ddc
                    }
                };
                if (g_viewer.entities.getById(entityObj.id) == undefined) {//实体不存在则创建
                    g_viewer.entities.add(entityObj);  //g_PPtn_entities.push(g_viewer.entities.add(entityObj));
                    g_Video.push(entityObj.id);
                } else
                    g_viewer.entities.getById(entityObj.id).show = true;
            });
        }
        function removeAllen(otype) {
            if (otype == undefined || otype == 'Real') {//实时水情
                G_ShowEntitys(g_layer_Entitys_River, false);
                G_ShowEntitys(g_layer_Entitys_Rain, false);
                G_ShowEntitys(g_layer_Entitys_Rsvr, false);
                G_ShowEntitys(g_Video, false);
                g_realData_Datasource.show = false;
                g_rainAnalysis_dataSource.show = false;
            } else if (otype == "Station") {//测站信息
                G_ShowEntitys(g_RealData, false);
                g_realData_Datasource.show = false;
                G_ShowEntitys(g_Video, false);
                g_rainAnalysis_dataSource.show = false;
            } else {
                G_ShowEntitys(g_layer_Entitys_River, false);
                G_ShowEntitys(g_layer_Entitys_Rain, false);
                G_ShowEntitys(g_layer_Entitys_Rsvr, false);
                G_ShowEntitys(g_RealData, false);
                g_rainAnalysis_dataSource.show = false;
            }
            hiddenWindow();
        }
        //指定类型的实体ID数组，是否显示，true显示
        function G_ShowEntitys(objArr, isShow) {
            var length = objArr.length, tObj;
            if (length == 0)
                return;
            for (var i = 0; i < length; i++) {
                tObj = g_viewer.entities.getById(objArr[i]);
                if (tObj)
                    tObj.show = isShow;                
            }
        }
        function hiddenWindow() { $("#legend").hide(); $("#legendGrid").hide(); $("#legendynamaic").hide(); }
        function createAll(clist, rshow, rtype, stcd, sdate, edate, tentype, region) {
            removeAllen("Real");
            LoadAreaBoundary();
            LoadLine_GL();
            LoadLine_line1();
            LoadLine_HHLY();
            //LoadLine_line2();
            //LoadLine_line3();
            CreateAllLoop(clist, rshow, rtype, stcd, sdate, edate, tentype, region);
        }
        function CreateAllLoop(clist, rshow, rtype, stcd, sdate, edate, tentype, region) {
            g_RealData.splice(0, g_RealData.length);
            if ($(".bo_tabcon1").is(":hidden"))
                $('.bo_tabcon1').show();
            if ($('.bo_lpopcon').is(":hidden"))
                $('.bo_lpopcon').show();
            if (clist.indexOf("Water") > -1) {
                setTimeout("Water('" + rtype + "','" + stcd + "','" + region + "')", 1000);
            }
            if (clist.indexOf("Rain") > -1) {
                setTimeout("Pptn('" + rshow + "','" + rtype.split('|')[0] + "','" + stcd + "','" + sdate + "','" + edate + "','" + tentype + "','" + region + "')", 2000);
            }
            setTimeout("firstQuery()", 6000);

            setTimeout("CreateAllLoop('" + clist + "','" + rshow + "','" + rtype + "','" + stcd + "','" + sdate + "','" + edate + "','" + tentype + "','" + region + "')", 3600000);

            g_realData_Datasource.show = true;
            if (!g_viewer.dataSources.contains(g_realData_Datasource)) {
                g_viewer.dataSources.add(g_realData_Datasource);
            }
        }
        //加载区域边界
        function LoadAreaBoundary() {
            var length = g_layer_Entitys_QY.length;
            if (length > 0)
                G_ShowEntitys(g_layer_Entitys_QY, true);
            else {
                com.ajax({
                    type: 'get',
                    url: '/Home/LoadAreaBoundary/',
                    showLoading: true,
                    success: function (d) {

                        Borderline("QY", d, new Cesium.Color(254 / 255, 163 / 255, 163 / 255, 1), 3, 1);//(35/255,148/255,242/255,0.7),5);
                    }
                });
            }
        }
        //加载黄河干流
        function LoadLine_GL() {
            var length = g_layer_Entitys_GL.length;
            if (length > 0)
                G_ShowEntitys(g_layer_Entitys_GL, true);
            else {
                com.ajax({
                    type: 'get',
                    url: '/RealData/IceJam/GetDynamicJson/',
                    showLoading: true,
                    success: function (d) {
                        $("#legend").hide();
                        lineDynamic(d, 3, new Cesium.Color(35 / 255, 148 / 255, 242 / 255, 1));
                    }
                });
            }
        }
        //图层是否显示，对象ID数组，是否显示
        function LayerIsShow(objArr, isShow) {
            var length = objArr.length;
            if (length == 0)
                return;
            for (var i = 0; i < length; i++) {
                if (g_viewer.entities.getById(objArr[i]))
                    g_viewer.entities.getById(objArr[i]).show = isShow;
            }
        }
        //加载主要支流
        function LoadLine_ZL() {
            com.ajax({
                type: 'get',
                url: '/Home/LoadLine_ZL/',
                showLoading: true,
                success: function (d) {

                    Borderline("ZL", d, new Cesium.Color(35 / 255, 148 / 255, 242 / 255, 0.7), 2);
                }
            });
        }
        //加载流域边界
        function LoadLine_HHLY() {
            com.ajax({
                type: 'get',
                url: '/Home/LoadLine_HHLY/',
                showLoading: true,
                success: function (d) {

                    Borderline("HHLY", d, new Cesium.Color(35 / 255, 148 / 255, 242 / 255, 0.7), 2);
                }
            });
        }
        //加载一级支流
        function LoadLine_line1() {
            var length = g_layer_Entitys_Line1.length;
            if (length > 0)
                G_ShowEntitys(g_layer_Entitys_Line1, true);
            else {
            com.ajax({
                type: 'get',
                url: '/Home/LoadLine_Line1/',
                showLoading: true,
                success: function (d) {

                    Borderline("line1", d, new Cesium.Color(35 / 255, 148 / 255, 242 / 255, 0.7), 2,1);
                }
                });
            }
            length = g_layer_Entitys_Polygon1.length;
            if (length > 0)
                G_ShowEntitys(g_layer_Entitys_Polygon1, true);
            else {
                com.ajax({
                    type: 'get',
                    url: '/Home/LoadLine_Polygon1/',
                    //showLoading: true,
                    success: function (d) {
                        BorderPolygon("op", d, 2);
                        //Borderline("Pg", d, new Cesium.Color(35 / 255, 148 / 255, 242 / 255, 0.7), 2, 1);
                    }
                });
            }
        }
        //加载二级支流
        function LoadLine_line2() {
            var length = g_layer_Entitys_Line2.length;
            if (length > 0)
                G_ShowEntitys(g_layer_Entitys_Line2, true);
            else {
                com.ajax({
                    type: 'get',
                    url: '/Home/LoadLine_Line2/',
                    showLoading: true,
                    success: function (d) {

                        Borderline("line2", d, new Cesium.Color(35 / 255, 148 / 255, 242 / 255, 0.7), 2, 0.2);
                    }
                });
            }
            length = g_layer_Entitys_Polygon2.length;
            if (length > 0)
                G_ShowEntitys(g_layer_Entitys_Polygon2, true);
            else {
                com.ajax({
                    type: 'get',
                    url: '/Home/LoadLine_Polygon2/',
                    //showLoading: true,
                    success: function (d) {
                        BorderPolygon("op2", d, 1);
                    }
                });
            }
        }
        //加载三级支流
        function LoadLine_line3() {
            var length = g_layer_Entitys_Line3.length;
            if (length > 0)
                G_ShowEntitys(g_layer_Entitys_Line3, true);
            else {
                com.ajax({
                    type: 'get',
                    url: '/Home/LoadLine_Line3/',
                    showLoading: true,
                    success: function (d) {

                        Borderline("line3", d, new Cesium.Color(35 / 255, 148 / 255, 242 / 255, 0.7), 2, 0.05);
                    }
                });
            }
            length = g_layer_Entitys_Polygon3.length;
            if (length > 0)
                G_ShowEntitys(g_layer_Entitys_Polygon3, true);
            else {
                com.ajax({
                    type: 'get',
                    url: '/Home/LoadLine_Polygon3/',
                    //showLoading: true,
                    success: function (d) {
                        BorderPolygon("op3", d, 1);
                    }
                });
            }
        }
        //圆点
        function getImageRainCircle(rainTa) {
            var imgPath = getHomeUrl();
            if (rainTa == "" || rainTa <= 0) {
                imgPath += "/images/prm/y_0.png";
            } else if (rainTa > 0 && rainTa <= 10) {
                imgPath += "/images/prm/y_10.png";
            } else if (rainTa > 10 && rainTa <= 25) {
                imgPath += "/images/prm/y_25.png";
            } else if (rainTa > 25 && rainTa <= 50) {
                imgPath += "/images/prm/y_50.png";
            } else if (rainTa > 50 && rainTa <= 100) {
                imgPath += "/images/prm/y_100.png";
            } else if (rainTa > 100 && rainTa <= 250) {
                imgPath += "/images/prm/y_250.png";
            } else {
                imgPath += "/images/prm/y_251.png";
            }
            return imgPath;
        }
        //云朵
        function getImageRain(wth, rainTa) {
            var imgPath = getHomeUrl();
            if (rainTa >= 0 && rainTa < 10) {
                if (wth == "雨" || wth == "7")
                    imgPath += "/images/prm/01.gif";
                else
                    imgPath += "/images/prm/00.gif";
            } else if (rainTa >= 10 && rainTa < 25) {
                if (wth == "雨" || wth == "7")
                    imgPath += "/images/prm/11.gif";
                else
                    imgPath += "/images/prm/10.gif";
            } else if (rainTa >= 25 && rainTa < 50) {
                if (wth == "雨" || wth == "7")
                    imgPath += "/images/prm/22.gif";
                else
                    imgPath += "/images/prm/20.gif";
            } else if (rainTa >= 50 && rainTa < 100) {
                if (wth == "雨" || wth == "7")
                    imgPath += "/images/prm/33.gif";
                else
                    imgPath += "/images/prm/30.gif";
            } else if (rainTa >= 100 && rainTa < 250) {
                if (wth == "雨" || wth == "7")
                    imgPath += "/images/prm/44.gif";
                else
                    imgPath += "/images/prm/40.gif";
            } else {
                if (wth == "雨" || wth == "7")
                    imgPath += "/images/prm/55.gif";
                else
                    imgPath += "/images/prm/50.gif";
            }
            return imgPath;
        }
        function getImageRainDDC(rainTa) {
            var ldc = 0;
            if (rainTa < 10) {
                ldc = g_lable_far * 0.1;
            } else if (rainTa < 25) {
                ldc = g_lable_far * 0.25;
            } else if (rainTa < 50) {
                ldc = g_lable_far;
            } else {
                ldc = g_lable_far * 1.2;
            }
            return new Cesium.DistanceDisplayCondition(g_lable_near, ldc);
        }
        function makeJsonStr(str) {
            return str.toString().replace(/[\[\]]/g, '');
        }
        function toObj(str) {
            return eval('(' + str + ')');
        }
        //--------------------ArcGIS  等值面/等值线
        //var _gpData = '[{ "x": "90.032361", "y": "29.793778", "value": "1128.0" }, { "x": "89.976111", "y": "29.734472", "value": "1089.0" }, { "x": "89.927694", "y": "29.732833", "value": "1103.0" }, { "x": "89.944556", "y": "29.671778", "value": "974.5" }, { "x": "90.030778", "y": "29.617083", "value": "1020.5" }, { "x": "90.013750", "y": "29.549250", "value": "848.2" }, { "x": "89.951611", "y": "29.610361", "value": "1080.0" }, { "x": "90.102694", "y": "29.488472", "value": "683.4" }, { "x": "90.133250", "y": "29.490583", "value": "799.0" }, { "x": "90.151611", "y": "29.497917", "value": "784.0" }, { "x": "90.146306", "y": "29.452000", "value": "667.6" }, { "x": "92.050000", "y": "30.433000", "value": "873.0" }, { "x": "91.348571", "y": "30.182189", "value": "1319.9" }, { "x": "91.793346", "y": "29.899291", "value": "1360.6" }, { "x": "91.160020", "y": "29.640400", "value": "1578.7" }, { "x": "90.549831", "y": "30.081572", "value": "913.1" }, { "x": "90.952000", "y": "29.439000", "value": "0.0" }, { "x": "92.850000", "y": "31.070000", "value": "343.6" }, { "x": "92.667000", "y": "30.780000", "value": "335.2" }, { "x": "92.367000", "y": "30.667000", "value": "322.2" }, { "x": "90.633000", "y": "30.900000", "value": "206.6" }, { "x": "90.933000", "y": "30.417000", "value": "249.0" }, { "x": "91.376111", "y": "29.681667", "value": "0" }, { "x": "91.720056", "y": "30.571028", "value": "1101.6" }, { "x": "91.538806", "y": "30.631083", "value": "1055.4" }, { "x": "91.484694", "y": "30.587056", "value": "1033.8" }, { "x": "91.401639", "y": "30.558750", "value": "1023.6" }, { "x": "91.279500", "y": "30.551917", "value": "904.6" }, { "x": "91.335556", "y": "30.578583", "value": "920.4" }, { "x": "91.335778", "y": "30.540139", "value": "1352.6" }, { "x": "91.358361", "y": "30.509083", "value": "1051.0" }, { "x": "91.191472", "y": "30.568139", "value": "924.4" }, { "x": "91.275444", "y": "30.534056", "value": "967.8" }, { "x": "91.207944", "y": "30.508111", "value": "855.0" }, { "x": "91.288333", "y": "30.528028", "value": "1034.6" }, { "x": "91.106917", "y": "30.485944", "value": "781.2" }, { "x": "92.298972", "y": "29.691611", "value": "620.0" }, { "x": "92.236778", "y": "29.695250", "value": "0.0" }, { "x": "92.156500", "y": "29.709556", "value": "1110.0" }, { "x": "92.111778", "y": "29.705028", "value": "1153.5" }, { "x": "92.079000", "y": "29.710583", "value": "1.5" }, { "x": "91.894722", "y": "29.661944", "value": "23.0" }, { "x": "91.908611", "y": "29.669167", "value": "1202.5" }, { "x": "91.915056", "y": "29.765278", "value": "253.5" }, { "x": "91.897583", "y": "29.729778", "value": "751.0" }, { "x": "91.820667", "y": "29.682333", "value": "1308.5" }, { "x": "92.078917", "y": "29.710556", "value": "1329.0" }, { "x": "91.857306", "y": "29.819139", "value": "988.5" }, { "x": "91.829194", "y": "29.782083", "value": "1018.5" }, { "x": "91.492500", "y": "29.978556", "value": "1347.5" }, { "x": "91.460556", "y": "29.936944", "value": "591.4" }, { "x": "91.462361", "y": "29.877389", "value": "1076.0" }, { "x": "91.459611", "y": "29.842750", "value": "0.0" }, { "x": "90.969750", "y": "29.971694", "value": "985.8" }, { "x": "91.031806", "y": "29.937389", "value": "942.4" }, { "x": "90.970000", "y": "29.884583", "value": "1017.0" }, { "x": "91.086278", "y": "29.950750", "value": "963.6" }, { "x": "91.158694", "y": "29.905306", "value": "770.4" }, { "x": "91.093500", "y": "29.872833", "value": "938.6" }, { "x": "91.140583", "y": "29.978500", "value": "976.6" }, { "x": "91.188833", "y": "29.881639", "value": "925.8" }, { "x": "91.239750", "y": "29.960083", "value": "901.2" }, { "x": "91.261833", "y": "29.862056", "value": "849.0" }, { "x": "91.277778", "y": "29.878861", "value": "893.0" }, { "x": "91.370611", "y": "29.939111", "value": "912.4" }, { "x": "91.362380", "y": "29.907169", "value": "985.4" }, { "x": "91.357361", "y": "29.862056", "value": "983.0" }, { "x": "91.159750", "y": "29.711333", "value": "2239.0" }, { "x": "91.117583", "y": "29.700639", "value": "2055.5" }, { "x": "91.115694", "y": "29.667528", "value": "39.0" }, { "x": "90.983500", "y": "29.432361", "value": "1033.5" }, { "x": "90.951028", "y": "29.429417", "value": "3.0" }, { "x": "91.165167", "y": "29.767631", "value": "995.6" }, { "x": "91.078056", "y": "29.723333", "value": "1361.0" }, { "x": "91.068333", "y": "29.724056", "value": "1130.2" }, { "x": "91.165167", "y": "29.767611", "value": "1328.0" }, { "x": "91.250833", "y": "29.728333", "value": "986.4"}]';
        //-------画等值线/面
        //var _gpData;
        //var _gpType;
        //require([
        //    "esri/tasks/Geoprocessor"
        //], function (Geoprocessor) {
        //    var gp;
        //    function CreateMX() {
        //        $("#legend").show();
        //        esriConfig.defaults.io.proxyUrl = "/proxy/proxy.ashx";
        //        esriConfig.defaults.io.alwaysUseProxy = true;
        //        //gp = new Geoprocessor("http://192.168.1.6/ArcGIS/rest/services/lasa/GPServer/%E7%82%B9%E5%88%86%E6%9E%90%E7%AD%89%E5%80%BC%E9%9D%A2GP");
        //        gp = new Geoprocessor("http://10.54.1.4:1010/ArcGIS/rest/services/sljfx/GPServer/%E7%82%B9%E5%88%86%E6%9E%90%E7%AD%89%E5%80%BC%E9%9D%A2GP");
        //        var params = { "输入点字符": _gpData };

        //        gp.submitJob(params, gpJobComplete);
        //    }
        //    //GP完成之后加载结果图层
        //    function gpJobComplete(jobinfo) {
        //        if (_gpType == 'X')
        //            gp.getResultData(jobinfo.jobId, "outLine_shp", lineData, function (err) { alert(err); });
        //        else
        //            gp.getResultData(jobinfo.jobId, "outPolygon_shp", rdata, function (err) { alert(err); });
        //    }

        //    dojo.connect("Surface", CreateMX);
        //});
        //function Surface(pointArr, otype) { _gpData = pointArr.toString(); _gpType = otype; }

        //--------------------
        /**
         * 等值面绘制
         * modify by SUN
         * Date:2019-05-29 17:00
         * param results
         */
        function rdata(results) {
            var features = results.features;
            for (var f = 0, fl = features.length; f < fl; f++) {
                feature = features[f];
                //在这里可以根据feature中的一个标识级别的字段来判断，不同级别设置不同的颜色
                var myPolygon, entityObj, intArr;
                if (feature.properties["GRIDCODE"] == "0") {
                    var slist = "";
                    for (j = 0, len = feature.geometry.coordinates.length; j < len; j++) {
                        slist += "[" + makeJsonStr(feature.geometry.coordinates[j]) + "],";
                    }
                    MakePolygon(slist.substr(0, slist.length - 1), feature.properties.ADCODE + "_" + f, 1, 1, 1);
                }
                else if (feature.properties["GRIDCODE"] == "1") {
                    var slist = "";
                    for (j = 0, len = feature.geometry.coordinates.length; j < len; j++) {
                        slist += "[" + makeJsonStr(feature.geometry.coordinates[j]) + "],";
                    }
                    MakePolygon(slist.substr(0, slist.length - 1), feature.properties.ADCODE + "_" + f, 165 / 255, 247 / 255, 140 / 255);
                }
                else if (feature.properties["GRIDCODE"] == "2") {
                    var slist = "";
                    for (j = 0, len = feature.geometry.coordinates.length; j < len; j++) {
                        slist += "[" + makeJsonStr(feature.geometry.coordinates[j]) + "],";
                    }
                    MakePolygon(slist.substr(0, slist.length - 1), feature.properties.ADCODE + "_" + f, 49 / 255, 166 / 255, 0);
                }
                else if (feature.properties["GRIDCODE"] == "3") {
                    var slist = "";
                    for (j = 0, len = feature.geometry.coordinates.length; j < len; j++) {
                        slist += "[" + makeJsonStr(feature.geometry.coordinates[j]) + "],";
                    }
                    MakePolygon(slist.substr(0, slist.length - 1), feature.properties.ADCODE + "_" + f, 99 / 255, 190 / 255, 1);
                }
                else if (feature.properties["GRIDCODE"] == "4") {
                    var slist = "";
                    for (j = 0, len = feature.geometry.coordinates.length; j < len; j++) {
                        slist += "[" + makeJsonStr(feature.geometry.coordinates[j]) + "],";
                    }
                    MakePolygon(slist.substr(0, slist.length - 1), feature.properties.ADCODE + "_" + f, 0, 0, 1);
                }
                else if (feature.properties["GRIDCODE"] == "5") {
                    var slist = "";
                    for (j = 0, len = feature.geometry.coordinates.length; j < len; j++) {
                        slist += "[" + makeJsonStr(feature.geometry.coordinates[j]) + "],";
                    }
                    MakePolygon(slist.substr(0, slist.length - 1), feature.properties.ADCODE + "_" + f, 1, 0, 1);
                }
                else {
                    var slist = "";
                    for (j = 0, len = feature.geometry.coordinates.length; j < len; j++) {
                        slist += "[" + makeJsonStr(feature.geometry.coordinates[j]) + "],";
                    }
                    MakePolygon(slist.substr(0, slist.length - 1), feature.properties.ADCODE + "_" + f, 1, 0, 0);
                }
            }
            // g_viewer.zoomTo(g_viewer.entities);
        }
        /**
         * Add 2019-06-15
         * param sList   点序列
         * param tName   实体名称
         * param r
         * param g
         * param b
         */
        function MakePolygon(sList, tName, r, g, b) {
            var intArr = toObj("[" + sList + "]");
            var entityObj;
            if (intArr.length === 1) {
                entityObj = {
                    name: tName,
                    polygon: {
                        hierarchy: Cesium.Cartesian3.fromDegreesArray(intArr[0]),
                        material: new Cesium.Color(r, g, b, 100 / 255).withAlpha(0.5)
                    }
                };
            } else {
                var hobj = new Array();
                for (var h = 1; h < intArr.length; h++) {
                    hobj.push({
                        positions: Cesium.Cartesian3.fromDegreesArray(intArr[h])
                    });
                }
                entityObj = {
                    name: tName,
                    polygon: {
                        hierarchy: {
                            positions: Cesium.Cartesian3.fromDegreesArray(intArr[0]),
                            holes: hobj
                        },
                        material: new Cesium.Color(r, g, b, 100 / 255).withAlpha(0.5)
                    }
                };
            }
            g_viewer.entities.add(entityObj);
        }
        /**
         * 等值线绘制
         * modify by SUN
         * Date:2019-05-29 17:00
         * Modify 2019-06-15
         * param results
         */
        function lineData(results) {
            var features = results.features;
            var feature;
            var ddc = new Cesium.DistanceDisplayCondition(g_lable_near, g_lable_far);
            var cenIndex = 0;
            for (var f = 0, fl = features.length; f < fl; f++) {
                feature = features[f];
                //在这里可以根据feature中的一个标识级别的字段来判断，不同级别设置不同的颜色
                if (feature.properties["CONTOUR"] < 1) {
                    if ("LineString" == feature.geometry.type) {
                        var slist = "[" + makeJsonStr(feature.geometry.coordinates) + "]";
                        MakeLine(slist, "dzx" + f + "_" + feature.properties.ID, feature.properties.CONTOUR, ddc, 255, 255, 255);
                    } else {//"MultiLineString"
                        for (j = 0, len = feature.geometry.coordinates.length; j < len; j++) {
                            var slist = "[" + makeJsonStr(feature.geometry.coordinates[j]) + "]";
                            MakeLine(slist, "dzx" + f + "_" + feature.properties.ID, feature.properties.CONTOUR, ddc, 255, 255, 255);
                        }
                    }
                }
                else if (feature.properties["CONTOUR"] < 10) {
                    if ("LineString" == feature.geometry.type) {
                        var slist = "[" + makeJsonStr(feature.geometry.coordinates) + "]";
                        MakeLine(slist, "dzx" + f + "_" + feature.properties.ID, feature.properties.CONTOUR.toString(), ddc, 165, 247, 140);
                    } else {//"MultiLineString"
                        for (j = 0, len = feature.geometry.coordinates.length; j < len; j++) {
                            var slist = "[" + makeJsonStr(feature.geometry.coordinates[j]) + "]";
                            MakeLine(slist, "dzx" + f + "_" + feature.properties.ID, feature.properties.CONTOUR, ddc, 165, 247, 140);
                        }
                    }
                }
                else if (feature.properties["CONTOUR"] < 25) {
                    if ("LineString" == feature.geometry.type) {
                        var slist = "[" + makeJsonStr(feature.geometry.coordinates) + "]";
                        MakeLine(slist, "dzx" + f + "_" + feature.properties.ID, feature.properties.CONTOUR, ddc, 49, 166, 0);
                    } else {//"MultiLineString"
                        for (j = 0, len = feature.geometry.coordinates.length; j < len; j++) {
                            var slist = "[" + makeJsonStr(feature.geometry.coordinates[j]) + "]";
                            MakeLine(slist, "dzx" + f + "_" + feature.properties.ID, feature.properties.CONTOUR, ddc, 49, 166, 0);
                        }
                    }
                }
                else if (feature.properties["CONTOUR"] < 50) {
                    if ("LineString" == feature.geometry.type) {
                        var slist = "[" + makeJsonStr(feature.geometry.coordinates) + "]";
                        MakeLine(slist, "dzx" + f + "_" + feature.properties.ID, feature.properties.CONTOUR, ddc, 99, 190, 255);
                    } else {//"MultiLineString"
                        for (j = 0, len = feature.geometry.coordinates.length; j < len; j++) {
                            var slist = "[" + makeJsonStr(feature.geometry.coordinates[j]) + "]";
                            MakeLine(slist, "dzx" + f + "_" + feature.properties.ID, feature.properties.CONTOUR, ddc, 99, 190, 255);
                        }
                    }
                }
                else if (feature.properties["CONTOUR"] < 100) {
                    if ("LineString" == feature.geometry.type) {
                        var slist = "[" + makeJsonStr(feature.geometry.coordinates) + "]";
                        MakeLine(slist, "dzx" + f + "_" + feature.properties.ID, feature.properties.CONTOUR, ddc, 0, 0, 255);
                    } else {//"MultiLineString"
                        for (j = 0, len = feature.geometry.coordinates.length; j < len; j++) {
                            var slist = "[" + makeJsonStr(feature.geometry.coordinates[j]) + "]";
                            MakeLine(slist, "dzx" + f + "_" + feature.properties.ID, feature.properties.CONTOUR, ddc, 0, 0, 255);
                        }
                    }
                }
                else if (feature.properties["CONTOUR"] < 250) {
                    if ("LineString" == feature.geometry.type) {
                        var slist = "[" + makeJsonStr(feature.geometry.coordinates) + "]";
                        MakeLine(slist, "dzx" + f + "_" + feature.properties.ID, feature.properties.CONTOUR, ddc, 255, 0, 255);
                    } else {//"MultiLineString"
                        for (j = 0, len = feature.geometry.coordinates.length; j < len; j++) {
                            var slist = "[" + makeJsonStr(feature.geometry.coordinates[j]) + "]";
                            MakeLine(slist, "dzx" + f + "_" + feature.properties.ID, feature.properties.CONTOUR, ddc, 255, 0, 255);
                        }
                    }
                }
                else {
                    if ("LineString" == feature.geometry.type) {
                        var slist = "[" + makeJsonStr(feature.geometry.coordinates) + "]";
                        MakeLine(slist, "dzx" + f + "_" + feature.properties.ID, feature.properties.CONTOUR, ddc, 255, 0, 0);
                    } else {//"MultiLineString"
                        for (j = 0, len = feature.geometry.coordinates.length; j < len; j++) {
                            var slist = "[" + makeJsonStr(feature.geometry.coordinates[j]) + "]";
                            MakeLine(slist, "dzx" + f + "_" + feature.properties.ID, feature.properties.CONTOUR, ddc, 255, 0, 0);
                        }
                    }
                }
            }
        }
        /**
         * Add 2019-06-15  等值线增加数字
         * param slist 点序列
         * param nId   实体名字
         * param tvalue label显示内容
         * param lddc   距离
         * param r      颜色
         * param g      颜色
         * param b      颜色
         */
        function MakeLine(slist, nId, tvalue, lddc, r, g, b) {
            var intArr = toObj(slist);
            var cenIndex = ((intArr.length / 2) % 2 == 0 ? (intArr.length / 2) : (intArr.length / 2 - 1));
            entityObj = {
                //sttp: 'Polygon',
                //id: nId,
                //show: true,
                //description: feature.properties.NAME + ":" + feature.properties.contour,
                position: Cesium.Cartesian3.fromDegrees(intArr[cenIndex], intArr[cenIndex + 1], 0),
                label: {
                    text: tvalue.toString(),
                    scale: 1,
                    font: '16px sans-serif',
                    fillColor: Cesium.Color.BLACK,// new Cesium.Color(241 / 255, 1, 33 / 255, 1), // Cesium.Color.MEDIUMSPRINGGREEN,
                    style: Cesium.LabelStyle.FILL,//_AND_OUTLINE,
                    //outlineColor: new Cesium.Color(1 / 255, 122/255, 226 / 255, 1),
                    //outlineWidth: 2,
                    //showBackground: true,
                    //backgroundColor: new Cesium.Color(1, 1, 1, 1),//new Cesium.Color(99/255, 182/255,250/255, 1),
                    verticalOrigin: Cesium.VerticalOrigin.BOTTOM, //垂直方向以底部来计算标签的位置
                    pixelOffset: new Cesium.Cartesian2(0, -9),   //偏移量
                    distanceDisplayCondition: lddc
                },
                polyline: {
                    positions: Cesium.Cartesian3.fromDegreesArray(intArr),
                    width: 5,
                    material: new Cesium.Color(r / 255, g / 255, 140 / b),//, 100 / 255),
                    value: tvalue
                }
            };
            g_viewer.entities.add(entityObj);
        }

    </script>
    <!--等值线等值面 add by SUN BEGIN-->
    <script type="text/javascript">
        /**
         * 获取等值线面数据
         * add by SUN
         * Date:2019-05-29 13:00
         * param sDate：起始日期
         * param eDate：结束日期
         * param surfaceType：等值线等值面标志，1-等值面，0-等值线
         * param type：0-时段雨量，1-日雨量
         * */
        function ShowSurface_old(sDate, eDate, surfaceType, type) {
            //清空其他功能添加的地图标注
            g_viewer.entities.removeAll();
            showRealDataLabel(false);
            $('.bo_lpopcon').hide();
            //请求数据
            com.ajax({
                type: 'get',
                url: '/RealData/Rain/GetRainAnalysisData/',
                data: {
                    "startDate": sDate, "endDate": eDate, "type": type, "featureType": surfaceType
                },
                showLoading: true,
                success: function (d) {
                    if (surfaceType == 1) {
                        $("#legend").show();
                        rdata(d);
                    } else if (surfaceType == 0) {
                        $("#legend").hide();
                        lineData(d);
                    }

                }
            });
            /*$.getJSON("/RealData/Rain/GetRainAnalysisData/", { "startDate": "2006-09-07", "endDate": "2006-09-20", "type": 1 }, function (jsondata) {
                $("#legend").show();
                rdata(jsondata);
            });*/
        }


        //克里金插值模型参数
        var g_kriging_params = {
            krigingModel: 'exponential',//model还可选'gaussian','spherical','exponential'
            krigingSigma2: 0,
            krigingAlpha: 100,
            canvasAlpha: 0.5,//canvas图层透明度
            colors: ["#FFFFFF", "#A5F78C", "#31A600", '#63BEFF', '#0000FF', '#FF00FF', '#FF0000'],
            gridNum: 500,//格网大小
            levels: [[0, 1], [1, 10], [10, 25], [25, 50], [50, 100], [100, 250], [250, 9999]],
            //breaksColors: ["#A5F78C", "#31A600", "#63BEFF", "#0000FF", "#FF00FF"],//等值线不同级别不同颜色
            breaksColors: {
                '10': new Cesium.Color(165/255, 247/255, 140/255, 1),
                '25': new Cesium.Color(49 / 255, 166 / 255, 0 / 255, 1),
                '50': new Cesium.Color(99 / 255, 190 / 255, 255 / 255, 1),
                '100': new Cesium.Color(0 / 255, 0 / 255, 255 / 255, 1),
                '250': new Cesium.Color(255 / 255, 0 / 255, 255 / 255, 1)
            },
            breaks: [10, 25, 50, 100, 250],//等值线级别
            lineCellWidth: 1,//等值线网格点相隔距离（公里为单位）
            bbox: null,
            boundEntity: null,
            boundCoordinates: null
        };

        var g_rainAnalysis_dataSource = new Cesium.CustomDataSource('rainAnalysis'); 
        /**
         * 获取等值线面数据
         * add by lxm
         * Date:2019-08-07
         * param sDate：起始日期
         * param eDate：结束日期
         * param surfaceType：等值线等值面标志，1-等值面，0-等值线
         * param type：0-时段雨量，1-日雨量
         * */
        function ShowSurface(sDate, eDate, surfaceType, type) {
            flyToInitpos();
            //清空其他功能添加的地图标注(实时信息)
            showRealDataLabel(false);
            if (!g_viewer.dataSources.contains(g_rainAnalysis_dataSource)) {
                g_viewer.dataSources.add(g_rainAnalysis_dataSource);
            }
            g_rainAnalysis_dataSource.entities.removeAll();
            g_rainAnalysis_dataSource.show = true;    
            $('.bo_lpopcon').hide();
            //请求数据
            com.ajax({
                type: 'get',
                url: '/RealData/Rain/GetSumRain/',
                data: {
                    "startDate": sDate, "endDate": eDate, "type": type
                },
                showLoading: true,
                success: function (d) {
                    if (d.length == null) {
                        return;
                    }
                    if (surfaceType == 1) {
                        $("#legend").show();
                        genSurface(d);
                    } else if (surfaceType == 0) {
                        $("#legend").hide();
                        genIsoline(d);
                    }

                }
            });
        }

        //创建等值线实体对象
        function createIsolineEntity(ptAry, lineBreak, lineColor) {
            let centerIndex = Math.floor(((ptAry.length / 2) - 1) / 2);
            g_rainAnalysis_dataSource.entities.add({
                position: Cesium.Cartesian3.fromDegrees(ptAry[centerIndex * 2], ptAry[centerIndex * 2 + 1]),
                label: {
                    text: lineBreak.toString(),
                    fillColor: Cesium.Color.WHITE,
                    outlineColor: Cesium.Color.BLACK,
                    outlineWidth: 6,
                    scale:0.5,
                    style: Cesium.LabelStyle.FILL_AND_OUTLINE
                },
                polyline: {
                    positions: Cesium.Cartesian3.fromDegreesArray(ptAry),
                    width: 8,
                    material: new Cesium.PolylineGlowMaterialProperty({
                        glowPower: 0.2,
                        taperPower: 0.5,
                        color: lineColor
                    })
                }
            });
        }

        //生成等值线
        function genIsoline(d) {
            //克里金插值模型需要的数据
            let values = [], lngs = [], lats = [];
            let dLength = d.length;
            if (dLength == 0) {
                return;
            }
            for (let i = 0; i < dLength; i++) {
                if (d[i].value == null) {
                    continue;
                }

                lngs.push(d[i].x);
                lats.push(d[i].y);
                values.push(d[i].value);
            }

            let variogram = kriging.train(values, lngs, lats,
                g_kriging_params.krigingModel, g_kriging_params.krigingSigma2, g_kriging_params.krigingAlpha);

            var pointGrid = turf.pointGrid(g_kriging_params.bbox, g_kriging_params.lineCellWidth, { units: 'kilometers' });
            
            let ptNum = pointGrid.features.length;
            for (let i = 0; i < ptNum;i++) {
                pointGrid.features[i].properties.rainData = kriging.predict(
                    pointGrid.features[i].geometry.coordinates[0],
                    pointGrid.features[i].geometry.coordinates[1],
                    variogram);
            }

            var turfPolygon = turf.polygon([g_kriging_params.boundCoordinates]);
            var options = { tolerance: 0.01, highQuality: false };
            var turfSP = turf.simplify(turfPolygon, options);
            var lines = turf.isolines(pointGrid, g_kriging_params.breaks, { zProperty: 'rainData' });
            for (let i = 0; i < lines.features.length;i++) {//共有几个级别的线
                let coordinates = lines.features[i].geometry.coordinates;   //这个级别线的集合
                let lineBreak = lines.features[i].properties.rainData;
                for (let j = 0; j < coordinates.length; j++) {
                    let coordAry = coordinates[j];//某条线点的集合
                    let ptAry = new Array();
                    for (let k = 0; k < coordAry.length; k++) {
                        let ptTmp = turf.point(coordAry[k]);
                        if (!turf.booleanPointInPolygon(ptTmp, turfSP)) {
                            if (ptAry.length >= 4) {
                                createIsolineEntity(ptAry, lineBreak,g_kriging_params.breaksColors[lineBreak]);
                            }
                            ptAry = new Array();
                            continue;
                        }
                        ptAry.push(coordAry[k][0]);
                        ptAry.push(coordAry[k][1]);
                    }

                    if (ptAry.length >= 4) {
                        createIsolineEntity(ptAry, lineBreak,g_kriging_params.breaksColors[lineBreak]);
                    }
                }
            }

            
        }

        //生成等值面
        function genSurface(d) {
            //g_viewer.entities.removeAll();
            //克里金插值模型需要的数据
            let values = [], lngs = [], lats = [];
            let dLength = d.length;
            if (dLength == 0) {
                return;
            }
            for (let i = 0; i < dLength; i++) {
                if (d[i].value == null) {
                    continue;
                }

                lngs.push(d[i].x);
                lats.push(d[i].y);
                values.push(d[i].value);
                //var labelEntity = g_viewer.entities.add({
                //    position: Cesium.Cartesian3.fromDegrees(d[i].x, d[i].y),
                //    point: {
                //        pixelSize: 5,
                //        color: Cesium.Color.YELLOW
                //    },
                //    label: {
                //        text: d[i].value.toString(),
                //        fillColor: Cesium.Color.BLACK,
                //        scale: 0.8
                //    }
                //});
            }

            if (g_kriging_params.boundEntity != null) {
                g_kriging_params.boundEntity.polygon.material.image.setValue(drawCanvasImage(lngs, lats, values, g_kriging_params.bbox));
                if (!g_rainAnalysis_dataSource.entities.contains(g_kriging_params.boundEntity)) {
                    g_kriging_params.boundEntity = g_rainAnalysis_dataSource.entities.add(g_kriging_params.boundEntity);
                }
                return;
            }

            //请求边界数据
            com.ajax({
                type: 'get',
                url: '/Home/LoadZYJBoundary',
                data: {
                },
                showLoading: true,
                success: function (boundData) {
                    var coordAry = boundData.features[0].geometry.coordinates;
                    g_kriging_params.boundCoordinates = boundData.features[0].geometry.coordinates;
                    g_kriging_params.bbox = turf.bbox(turf.lineString(coordAry));

                    var ptAry = new Array();
                    for (let i = 0; i < coordAry.length; i++) {
                        ptAry.push(coordAry[i][0]);
                        ptAry.push(coordAry[i][1]);
                    }
                    g_kriging_params.boundEntity = g_rainAnalysis_dataSource.entities.add({
                        id: 'boundTmp',
                        polygon: {
                            hierarchy: Cesium.Cartesian3.fromDegreesArray(ptAry),
                            material: new Cesium.ImageMaterialProperty({
                                image: drawCanvasImage(lngs, lats, values, g_kriging_params.bbox),
                                transparent: true
                            })
                        }
                    });
                    
                }
            });

        }

        function drawCanvasImage(lngs, lats, values, bbox) {
            let variogram = kriging.train(values, lngs, lats,
                g_kriging_params.krigingModel, g_kriging_params.krigingSigma2, g_kriging_params.krigingAlpha);

            let polygons = [];
            polygons.push([[bbox[0], bbox[1]], [bbox[0], bbox[3]],
                [bbox[2], bbox[3]], [bbox[2], bbox[1]]]);

            let grid = kriging.grid(polygons, variogram, (bbox[2] - bbox[0]) / g_kriging_params.gridNum);

            let canvas = document.createElement('canvas');

            var leftBot = Cesium.Cartesian3.fromDegrees(bbox[0], bbox[1]);
            screen_leftBot = Cesium.SceneTransforms.wgs84ToWindowCoordinates(g_viewer.scene, leftBot);

            var rightTop = Cesium.Cartesian3.fromDegrees(bbox[2], bbox[3]);
            screen_rightTop = Cesium.SceneTransforms.wgs84ToWindowCoordinates(g_viewer.scene, rightTop);

            canvas.width = screen_rightTop.x - screen_leftBot.x;
            canvas.height = screen_rightTop.y - screen_leftBot.y;

            canvas.style.display = 'block';

            canvas.getContext('2d').globalAlpha = g_kriging_params.canvasAlpha;

            kriging.plot2(canvas, grid,
                [bbox[0], bbox[2]], [bbox[1], bbox[3]], g_kriging_params.colors, g_kriging_params.levels);

            return canvas;
        }
    </script>
    <!--等值线等值面 END-->

    <script type="text/javascript">
        /**
         * 获取凌情数据
         * add by lw
         * Date:2019-05-30
         * param sDate：日期
         * */
        function ShowIceJamDynamic(sDate) {
            //debugger;
            //清空其他功能添加的地图标注
            g_viewer.entities.removeAll();
            $('.bo_lpopcon').hide();
            $("#legend").hide();
            $("#legendynamaic").show();
            $("#legendGrid").show();
            $('.bo_iimg1').hide();
            //LoadDynamicLine();
            GetIceJam_River(sDate);
        }

        /**
         * 返回凌情数据
         * add by lw
         * */
        function LoadDynamicLine() {
            com.ajax({
                type: 'get',
                url: '/RealData/IceJam/GetDynamicJson/',
                showLoading: true,
                success: function (d) {
                    $("#legend").hide();
                    //console.log(d);
                    lineDynamic(d, 5);
                }
            });
        }

        function LoadDynamicLine_bc(result) {
            com.ajax({
                type: 'get',
                url: '/RealData/IceJam/GetDynamicJson/',
                showLoading: true,
                success: function (d) {
                    $("#legend").hide();
                    lineDynamicDT(d, result);
                }
            });
        }

        /**
         * 创建黄河流域线
         * add by lw
         *  results 数据结果
         */
        function lineDynamic(results, lineWidth, renderColor) {

            if (!renderColor) {
                renderColor = Cesium.Color.LINEN;
            }
            var featureValue = results.features;
            for (var f = 0, fl = featureValue.length; f < fl; f++) {
                feature = featureValue[f];
                //在这里可以根据feature中的一个标识级别的字段来判断设置不同的颜色
                var myPolygon;
                //if (feature.properties["FIELD0"] == 22) {
                if (feature.geometry["type"] == "MultiLineString") {
                    for (var j = 0; j < feature.geometry.coordinates.length; j++) {
                        //for (j = 0, len = feature.geometry.length; j < len; j++) {
                        var slist = "[" + makeJsonStr(feature.geometry.coordinates[j]) + "]";
                        intArr = toObj(slist);
                        entityObj = {
                            id: "ly" + f + "_" + j,
                            polyline: {
                                positions: Cesium.Cartesian3.fromDegreesArray(intArr),
                                width: lineWidth,
                                material: renderColor,
                                value: feature.properties.CONTOUR
                            }
                        };
                        if (g_viewer.entities.getById(entityObj.id) == undefined) {
                            g_layer_Entitys_GL.push(entityObj.id);
                            g_viewer.entities.add(entityObj);
                        }
                    }
                }
                else {

                    //for (var j = 0; j < feature.geometry.coordinates.length; j++) {
                    var slist = "[" + makeJsonStr(feature.geometry.coordinates) + "]";
                    intArr = toObj(slist);
                    entityObj = {
                        id: "ly" + f + "_" + j,
                        polyline: {
                            positions: Cesium.Cartesian3.fromDegreesArray(intArr),
                            width: lineWidth,
                            material: renderColor,
                            value: feature.properties.CONTOUR
                        }
                    };
                    if (g_viewer.entities.getById(entityObj.id) == undefined) {
                        g_layer_Entitys_GL.push(entityObj.id);
                        g_viewer.entities.add(entityObj);
                    }
                }
                //}
            }
        }
        function Borderline(otype, results, renderColor, lineWidth, ddc) {
            if (!renderColor) {
                renderColor = Cesium.Color.LINEN;
            }
            if (!ddc)
                ddc = 1;
            var tddc = new Cesium.DistanceDisplayCondition(g_lable_near, g_lable_far * ddc);
            var featureValue = results.features;
            var index = 0;
            for (var f = 0, fl = featureValue.length; f < fl; f++) {
                feature = featureValue[f];
                //在这里可以根据feature中的一个标识级别的字段来判断设置不同的颜色
                var myPolygon;
                if (feature.geometry["type"] == "MultiLineString") {
                    for (var j = 0; j < feature.geometry.coordinates.length; j++) {
                        //for (j = 0, len = feature.geometry.length; j < len; j++) {
                        var slist = "[" + makeJsonStr(feature.geometry.coordinates[j]) + "]";
                        intArr = toObj(slist);
                        entityObj = {
                            id: otype + "_" + f + "_" + index,
                            polyline: {
                                positions: Cesium.Cartesian3.fromDegreesArray(intArr),
                                width: lineWidth,
                                material: renderColor,
                                value: feature.properties.CONTOUR,
                                distanceDisplayCondition: tddc
                            }
                        };
                        if (g_viewer.entities.getById(entityObj.id) == undefined) {
                            if (otype == "ZL")
                                g_layer_Entitys_ZL.push(entityObj.id);
                            else if (otype == "line1")
                                g_layer_Entitys_Line1.push(entityObj.id);
                            else if (otype == "line2")
                                g_layer_Entitys_Line2.push(entityObj.id);
                            else if (otype == "line3")
                                g_layer_Entitys_Line3.push(entityObj.id);
                            else if (otype == "QY")
                                g_layer_Entitys_QY.push(entityObj.id);
                            g_viewer.entities.add(entityObj);
                            index++;
                        }
                        else
                            g_viewer.entities.getById(entityObj.id).show = true;
                    }
                }
                else {
                    var slist = "[" + makeJsonStr(feature.geometry.coordinates) + "]";
                    intArr = toObj(slist);
                    entityObj = {
                        id: otype + "_" + f + "_" + index,
                        polyline: {
                            positions: Cesium.Cartesian3.fromDegreesArray(intArr),
                            width: lineWidth,
                            material: renderColor,
                            value: feature.properties.CONTOUR,
                            distanceDisplayCondition: tddc
                        }
                    };
                    if (g_viewer.entities.getById(entityObj.id) == undefined) {
                        if (otype == "ZL")
                            g_layer_Entitys_ZL.push(entityObj.id);
                        else if (otype == "line1")
                            g_layer_Entitys_Line1.push(entityObj.id);
                        else if (otype == "line2")
                            g_layer_Entitys_Line2.push(entityObj.id);
                        else if (otype == "line3")
                            g_layer_Entitys_Line3.push(entityObj.id);
                        else if (otype == "QY")
                            g_layer_Entitys_QY.push(entityObj.id);
                        g_viewer.entities.add(entityObj);
                        index++;
                    }
                    else
                        g_viewer.entities.getById(entityObj.id).show = true;
                }

                /*entityObj1 = {
                    id: feature.properties["FIELD0"] + "1_" + f,
                    polyline: {
                        positions: Cesium.Cartesian3.fromDegreesArray(intArr),
                        width: 3,
                        material: new Cesium.Color(1,0,0,1),
                        value: feature.properties.CONTOUR
                    }
                };
                //g_viewer.entities.add(entityObj1);
                material: new Cesium.PolylineGlowMaterialProperty({
                    glowPower: .1, //一个数字属性，指定发光强度，占总线宽的百分比。
                    color: new Cesium.Color(35 / 255, 148 / 255, 242 / 255, .9)
                }),//new Cesium.Color(35 / 255, 148 / 255, 242 / 255, 1),*/
            }

        }
        function BorderPolygon(otype, results, ddc) {
            var features = results.features;
            var index = 0;
            var tddc = new Cesium.DistanceDisplayCondition(0, g_lable_far * ddc);
            for (var f = 0, fl = features.length; f < fl; f++) {
                feature = features[f];
                for (var i = 0, ti = feature.geometry.coordinates.length; i < ti; i++)
                    Digui(otype, f + "_" + i, feature.geometry.coordinates[i], tddc);
                //在这里可以根据feature中的一个标识级别的字段来判断，不同级别设置不同的颜色
                /*var myPolygon, entityObj, intArr;
                var slist = "";
                for (j = 0, len = feature.geometry.coordinates.length; j < len; j++) {
                    slist += "[" + makeJsonStr(feature.geometry.coordinates[j]) + "],";
                    console.log(feature.geometry.coordinates[j]);
                }
                //MakePolygon(slist.substr(0, slist.length - 1), feature.properties.ADCODE + "_" + f, 1, 1, 1);
                var intArr = toObj("[" + slist.substr(0, slist.length - 1) + "]");
                var entityObj, tid = otype+"_" + f + "_" + index;

                if (intArr.length === 1) {
                    entityObj = {
                        id: tid,
                        //name: tName,
                        polygon: {
                            hierarchy: Cesium.Cartesian3.fromDegreesArray(intArr[0]),
                            material: new Cesium.Color(35 / 255, 148 / 255, 242 / 255, 1)
                        }
                    };
                } else {
                    var hobj = new Array();
                    for (var h = 1; h < intArr.length; h++) {
                        hobj.push({
                            positions: Cesium.Cartesian3.fromDegreesArray(intArr[h])
                        });
                    }
                    entityObj = {
                        id: tid,
                        //name: tName,
                        polygon: {
                            hierarchy: {
                                positions: Cesium.Cartesian3.fromDegreesArray(intArr[0]),
                                holes: hobj
                            },
                            material: new Cesium.Color(35 / 255, 148 / 255, 242 / 255, 1)
                        }
                    };
                }
                console.log(entityObj);
                if (g_viewer.entities.getById(tid) == undefined) {
                    index++;
                    g_viewer.entities.add(entityObj);
                } else {
                    g_viewer.entities.getById(tid).show = true;
                }*/
            }
        }
        function Digui(otype, f, obj,tddc) {
            if (obj.length > 0 && typeof (obj[0][0][0]) == "object") {
                Digui(otype, f, obj[0],tddc);
            } else {
                var slist = "", index = 0;
                for (j = 0, len = obj.length; j < len; j++) {
                    slist += "[" + makeJsonStr(obj[j]) + "],";
                }
                var intArr = toObj("[" + slist.substr(0, slist.length - 1) + "]");
                var entityObj, tid = otype + "_" + f + "_" + index;
                if (intArr.length === 1) {
                    entityObj = {
                        id: tid,
                        //name: tName,
                        polygon: {
                            hierarchy: Cesium.Cartesian3.fromDegreesArray(intArr[0]),
                            material: new Cesium.Color(35 / 255, 148 / 255, 242 / 255, 1),
                            distanceDisplayCondition: tddc
                        }
                    };
                } else {
                    var hobj = new Array();
                    for (var h = 1; h < intArr.length; h++) {
                        hobj.push({
                            positions: Cesium.Cartesian3.fromDegreesArray(intArr[h])
                        });
                    }
                    entityObj = {
                        id: tid,
                        //name: tName,
                        polygon: {
                            hierarchy: {
                                positions: Cesium.Cartesian3.fromDegreesArray(intArr[0]),
                                holes: hobj
                            },
                            material: new Cesium.Color(35 / 255, 148 / 255, 242 / 255, 1),
                            distanceDisplayCondition: tddc
                        }
                    };
                }

                if (g_viewer.entities.getById(tid) == undefined) {
                    if (otype == "op")
                        g_layer_Entitys_Polygon1.push(tid);
                    else if (otype == "op2")
                        g_layer_Entitys_Polygon2.push(tid);
                    else if (otype == "op3")
                        g_layer_Entitys_Polygon3.push(tid);
                    index++;
                    g_viewer.entities.add(entityObj);
                } else {
                    g_viewer.entities.getById(tid).show = true;
                }
            }
        }
        /**
         * 创建凌情关注的站点
         * add by lw
         * data 日期
         * rtype
         * rshow
         */
        function createDynamicLable(data, rtype, rshow) {
            var ddc = new Cesium.DistanceDisplayCondition(g_lable_near, g_lable_far);
            var location, imgSrc = "", graphic, sdesc, sName = "", sTm = "";
            imgSrc = getHomeUrl() + "/images/prm/sw.gif";
            $.each(data, function (i, item) {
                sTm = "站名：" + item.STNM;
                sName = item.STNM;
                //console.log(item.STCD + "--" + item.STNM + "--ZZ");
                if (item.TM != null) {
                    sTm += "$%时间：" + item.TM;
                    sTm += "$%水位：" + item.Z + "(m)";
                    if (item.Q)
                        sTm += "$%流量：" + item.Q + "(m3/s)";
                    if (item.QLTITHK)
                        sTm += "$%冰厚：" + item.QLTITHK + "(cm)";
                    sName += "：" + item.Z + "(m)";
                }
                var entityObj = MakeEntity(item, "ZZ", sTm, sName, imgSrc, ddc);
                if (g_viewer.entities.contains(entityObj))
                    g_viewer.entities.removeById(item.STCD);
                g_viewer.entities.add(entityObj);
            });
        }

        /**
         * 创建黄河流域凌情关注的站点信息
         * add by lw
         * state
         */
        function GetDynamic(state) {
            $.ajax({
                url: "/RealData/IceJam/GetDynamicPoint",
                data: { state: state },
                dataType: "json",
                success: function (data, status, xhr) {
                    createDynamicLable(data.rows);
                }
            });
        }

        /**
         * 获取当前日期下的凌情封河情况
         * add by lw
         * state
         */
        function GetDynamicDTMS(state) {
            $.ajax({
                url: "/RealData/IceJam/GetDynamicLQ",
                data: { state: state },
                dataType: "text",
                success: function (data) {
                    if (data != "") {
                        $("#divDTLQ").html(data);
                    }
                    else {
                        $("#divDTLQ").html('当前无凌情！');
                    }

                }
            });
        }

        /**
         * 绑定凌情动态关注的站点信息grid
         * add by lw
         * sdate
         */
        function ShowDynamicGrid(state) {
            $.ajax({
                url: "/RealData/IceJam/GetDynamicPoint",
                data: { state: state },
                dataType: "json",
                success: function (datass) {
                    $('#dgGridDynamic').datagrid({
                        singleSelect: true,
                        collapsible: false,
                        striped: true,
                        rownumbers: false,
                        data: datass,
                        columns: [[
                            { field: 'STNM', title: '站名', width: '25%', align: 'center' },
                            { field: 'Z', title: '水位', width: '25%', align: 'center' },
                            { field: 'Q', title: '流量', width: '25%', halign: 'center', align: 'right' },
                            { field: 'QLTITHK', title: '冰厚(cm)', width: '25%', halign: 'center', align: 'right' }
                        ]],
                        onLoadSuccess: function () {
                        }
                    });
                }
            });
        }

        /**
         * 凌情动态封河情况渲染
         * add by lw
         * state
         */
        function GetIceJam_River(state) {
            $.ajax({
                url: "/RealData/IceJam/GetIceDynamice",
                data: { state: state },
                dataType: "json",
                success: function (data) {
                    if (data.rows.length == 0) {
                        LoadDynamicLine();
                    }
                    else {
                        LoadDynamicLine_bc(data);
                    }
                }
            });
        }

        /**
         * 根据黄河流域凌情动态情况渲染
         * add by lw
         * sesults
         *  data
         */
        function lineDynamicDT(results, data) {
            var featureValue = results.features;
            for (var f = 0; f < featureValue.length; f++) {
                feature = featureValue[f];
                var stcdt = feature.properties["STCDT"];
                var stcdtend = feature.properties["STCDTEND"];
                var sortno = feature.properties["SORTNO"];
                for (var i = 0; i < data.rows.length; i++) {
                    var stcdb = data.rows[i].STCDB;
                    var stcde = data.rows[i].STCDE;
                    var sortnos = data.rows[i].SORTNO;
                    if (stcdt == stcdt && stcde == stcdtend && sortnos == sortno) {
                        if (data.rows[i].FDQK == 0) {
                            var myPolygon;
                            if (feature.geometry["type"] == "MultiLineString") {
                                for (var j = 0; j < feature.geometry.coordinates.length; j++) {
                                    var slist = "[" + makeJsonStr(feature.geometry.coordinates[j]) + "]";
                                    intArr = toObj(slist);
                                    entityObj = {
                                        name: feature.properties["FIELD0"] + "_" + f,
                                        polyline: {
                                            positions: Cesium.Cartesian3.fromDegreesArray(intArr),
                                            width: 5,
                                            material: Cesium.Color.LINEN,
                                            value: feature.properties.CONTOUR
                                        }
                                    };
                                    g_viewer.entities.add(entityObj);
                                }
                            }
                            else {
                                //for (var j = 0; j < feature.geometry.coordinates.length; j++) {
                                var slist = "[" + makeJsonStr(feature.geometry.coordinates) + "]";
                                intArr = toObj(slist);
                                entityObj = {
                                    name: feature.properties["FIELD0"] + "_" + f,
                                    polyline: {
                                        positions: Cesium.Cartesian3.fromDegreesArray(intArr),
                                        width: 5,
                                        material: Cesium.Color.LINEN,
                                        value: feature.properties.CONTOUR
                                    }
                                };
                                g_viewer.entities.add(entityObj);
                                //}
                            }
                        }
                        else if (data.rows[i].FDQK == 1) {
                            var myPolygon;
                            if (feature.geometry["type"] == "MultiLineString") {
                                for (var j = 0; j < feature.geometry.coordinates.length; j++) {
                                    var slist = "[" + makeJsonStr(feature.geometry.coordinates[j]) + "]";
                                    intArr = toObj(slist);
                                    entityObj = {
                                        name: feature.properties["FIELD0"] + "_" + f,
                                        polyline: {
                                            positions: Cesium.Cartesian3.fromDegreesArray(intArr),
                                            width: 5,
                                            material: Cesium.Color.BLUE,
                                            value: feature.properties.CONTOUR
                                        }
                                    };
                                    g_viewer.entities.add(entityObj);
                                }
                            }
                            else {
                                //for (var j = 0; j < feature.geometry.coordinates.length; j++) {
                                var slist = "[" + makeJsonStr(feature.geometry.coordinates) + "]";
                                intArr = toObj(slist);
                                entityObj = {
                                    name: feature.properties["FIELD0"] + "_" + f,
                                    polyline: {
                                        positions: Cesium.Cartesian3.fromDegreesArray(intArr),
                                        width: 5,
                                        material: Cesium.Color.BLUE,
                                        value: feature.properties.CONTOUR
                                    }
                                };
                                g_viewer.entities.add(entityObj);
                                //}
                            }

                        }
                        else if (data.rows[i].FDQK == 2) {
                            var myPolygon;
                            if (feature.geometry["type"] == "MultiLineString") {
                                for (var j = 0; j < feature.geometry.coordinates.length; j++) {
                                    var slist = "[" + makeJsonStr(feature.geometry.coordinates[j]) + "]";
                                    intArr = toObj(slist);
                                    entityObj = {
                                        name: feature.properties["FIELD0"] + "_" + f,
                                        polyline: {
                                            positions: Cesium.Cartesian3.fromDegreesArray(intArr),
                                            width: 5,
                                            material: Cesium.Color.ORCHID,
                                            value: feature.properties.CONTOUR
                                        }
                                    };
                                    g_viewer.entities.add(entityObj);
                                }
                            }
                            else {
                                //for (var j = 0; j < feature.geometry.coordinates.length; j++) {
                                var slist = "[" + makeJsonStr(feature.geometry.coordinates) + "]";
                                intArr = toObj(slist);
                                entityObj = {
                                    name: feature.properties["FIELD0"] + "_" + f,
                                    polyline: {
                                        positions: Cesium.Cartesian3.fromDegreesArray(intArr),
                                        width: 5,
                                        material: Cesium.Color.ORCHID,
                                        value: feature.properties.CONTOUR
                                    }
                                };
                                g_viewer.entities.add(entityObj);
                                //}
                            }
                        }
                        else {
                            var myPolygon;
                            if (feature.geometry["type"] == "MultiLineString") {
                                for (var j = 0; j < feature.geometry.coordinates.length; j++) {
                                    var slist = "[" + makeJsonStr(feature.geometry.coordinates[j]) + "]";
                                    intArr = toObj(slist);
                                    entityObj = {
                                        name: feature.properties["FIELD0"] + "_" + f,
                                        polyline: {
                                            positions: Cesium.Cartesian3.fromDegreesArray(intArr),
                                            width: 5,
                                            material: Cesium.Color.RED.withAlpha(0.5),
                                            value: feature.properties.CONTOUR
                                        }
                                    };
                                    g_viewer.entities.add(entityObj);
                                }
                            }
                            else {
                                //for (var j = 0; j < feature.geometry.coordinates.length; j++) {
                                var slist = "[" + makeJsonStr(feature.geometry.coordinates) + "]";
                                intArr = toObj(slist);
                                entityObj = {
                                    name: feature.properties["FIELD0"] + "_" + f,
                                    polyline: {
                                        positions: Cesium.Cartesian3.fromDegreesArray(intArr),
                                        width: 5,
                                        material: Cesium.Color.RED.withAlpha(0.5),
                                        value: feature.properties.CONTOUR
                                    }
                                };
                                g_viewer.entities.add(entityObj);
                                //}
                            }
                        }
                    }
                }
            }
        }
    </script>
    <div class="btn-toolbar no-print">
        <div id="toolbar" class="btn-group" style="margin: 5px 5px 5px 8px">
            <a id="btnHomeView" title="回到默认区域" class="btn btn-inverse" onclick="flyToInitpos();">
                <span class="fa fa-home fa-lg"></span>
            </a><a data-toggle="dropdown" id="baseLayerBtn"
                   title="底图设置" onclick="onClickBaseLayerBtn();" class="btn btn-inverse" aria-expanded="false">
                <span class="fa fa-map"></span>
                <div class="container-basemap dropDown-container">
                    <div id="baseLayerGroup">
                        <div id="baselayerWraper" class="service-items">
                            <div class="service-item">
                                <div id="divImage" onclick="onBaseMapCheck(this)" class="service-itemIcon service-itemIcon-selected"
                                     data-id="1">
                                    <img style="width: 100%; height: 100%;" src="~/Images/basemaps/tdt_img.png" title="BingMap" />
                                    <div class="service-itemAttr">
                                        <div class="service-itemBg">
                                        </div>
                                        <div class="service-itemDes">
                                            影像地图
                                        </div>
                                        <div class="service-itemUnSelected service-itemSelected">
                                            <span class="fa fa-check"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="service-itemLabel">
                                    影像地图
                                </div>
                            </div>
                            <div class="service-item">
                                <div id="divVector" onclick="onBaseMapCheck(this)" class="service-itemIcon" data-id="2">
                                    <img style="width: 100%; height: 100%;" src="~/Images/basemaps/vector.png" title="BingMap" />
                                    <div class="service-itemAttr">
                                        <div class="service-itemBg">
                                        </div>
                                        <div class="service-itemDes">
                                            矢量地图
                                        </div>
                                        <div class="service-itemUnSelected">
                                            <span class="fa fa-check"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="service-itemLabel">
                                    矢量地图
                                </div>
                            </div>
                            <div style="text-align: left">
                                <div class="squaredTwo" onclick="onCheckRoadNet();">
                                    <input id="chkRoadNet" checked="checked" type="checkbox" /><label class="check-icon"></label>
                                </div>
                                <label>
                                    显示路网
                                </label>
                                <div class="squaredTwo" onclick="onCheckTerrain();">
                                    <input id="chkTerrain" type="checkbox" /><label class="check-icon"></label>
                                </div>
                                <label>
                                    显示地形
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

            </a> <a data-toggle="dropdown" title="图层管理" onclick="onClickLayerMan();"
                    class="btn btn-inverse widget-btn"><span class="fa fa-tasks"></span></a>
            <script type="text/javascript">
                var g_bMeasure_Length = false;
                var g_bMeasure_Area = false;
                var g_measureEntites_Ary = new Array();
                function onClickMapToolBtn() {
                    if ($("#measureDropDown").hasClass("dropDown-visible")) {
                        $("#measureDropDown").removeClass("dropDown-visible");
                    }
                    else {
                        $("#measureDropDown").addClass("dropDown-visible");
                    }
                }
            </script>
            <a id="measureBtn" data-toggle="dropdown" onclick="onClickMapToolBtn();" title="地图工具"
               class="btn btn-inverse" aria-expanded="false">
                <span class="fa fa-cubes"></span>
                <div id="measureDropDown" class="dropDown-container">
                    <ul>
                        <li class="widget-btn" onclick="onClickMeasureBtn();" data-widget="widgets/measure/widget.js">
                            <i class="fa fa-share-alt"></i>图上量算
                        </li>
                        <li class="widget-btn" data-widget="widgets/centerXY/widget.js">
                            <i class="fa fa-map-pin">
                            </i>坐标定位
                        </li>

                    </ul>
                </div>
            </a> <a data-toggle="dropdown" title="全屏切换" onclick="fullScreenSwitch();"
                    class="btn btn-inverse widget-btn">
                <span id="sFSS" class="fa fa-expand"></span>
            </a>
            <a href="#" class="bo_topicon">
                <img src="~/images/bo_yujing.png" alt="" />
            </a>

        </div>
    </div>
    <div id="tooltip-view" class="cesium-popup" style="display: none;">
        <div class="cesium-popup-content-wrapper  cesium-popup-background">
            <div id="tooltip-content" class="cesium-popup-content cesium-popup-color">
            </div>
        </div>
        <div class="cesium-popup-tip-container">
            <div class="cesium-popup-tip  cesium-popup-background">
            </div>
        </div>
    </div>
    <div id="divLayer" style="display: none; z-index: 19891015; width: 250px; height: 562px;
                top: 50px; left: 5px;" class="layui-layer layui-layer-iframe layui-layer-border layer-mars-dialog2">
        <div class="layui-layer-title" style="cursor: move;" onmousedown="mouseDown(document.getElementById('divLayer'), event)"
             onmousemove="mouseMove(document.getElementById('divLayer'), event)" onmouseup="mouseUp(document.getElementById('divLayer'), event)">
            <table style="height: 100%; width: 230px; margin: 0px;">
                <tr>
                    <td>
                        图层管理
                    </td>
                    <td align="right">
                        <img style="cursor: pointer;" onclick="$('#divLayer').hide();" src="~/Images/close1.png" />
                    </td>
                </tr>
            </table>
        </div>
        <div id="" class="layui-layer-content" style="height: 520px; overflow: auto;">
            <ul id="infoTree" class="easyui-tree"></ul>
        </div>
    </div>
    <script type="text/javascript">
        function onCloseMeasureWnd() {
            $('#divMeasureWnd').hide();
            frmMeasureView.window.clearMeasureResult();
        }

        //计算多边形的质心
        function Area(p0, p1, p2) {
            var area = 0.0;
            area = p0.lng * p1.lat + p1.lng * p2.lat + p2.lng * p0.lat - p1.lng * p0.lat - p2.lng * p1.lat - p0.lng * p2.lat;
            return area / 2;
        }
        //计算polygon的质心
        function getPolygonAreaCenter(points) {
            var sum_x = 0;
            var sum_y = 0;
            var sum_area = 0;
            var p1 = points[1];
            for (var i = 2; i < points.length; i++) {
                p2 = points[i];
                area = Area(points[0], p1, p2);
                sum_area += area;
                sum_x += (points[0].lng + p1.lng + p2.lng) * area;
                sum_y += (points[0].lat + p1.lat + p2.lat) * area;
                p1 = p2;
            }
            var xx = sum_x / sum_area / 3;
            var yy = sum_y / sum_area / 3;
            return [xx, yy];
        }

        //据经纬度计算多边形面积
        var g_earthRadiusMeters = 6371000.0;
        var g_metersPerDegree = 2.0 * Math.PI * g_earthRadiusMeters / 360.0;
        var g_radiansPerDegree = Math.PI / 180.0;
        var g_degreesPerRadian = 180.0 / Math.PI;
        function calculateArea(points) {
            if (points.length > 2) {
                var areaMeters2 = PlanarPolygonAreaMeters2(points);
                //areaMeters2 = SphericalPolygonAreaMeters2(points);
                var retVal;
                if (areaMeters2 > 1000000.0) {
                    //areaMeters2 = SphericalPolygonAreaMeters2(points);

                    retVal = (areaMeters2 / 1000000).toFixed(2) + " 平方千米"
                }
                else {
                    retVal = areaMeters2.toFixed(2) + " 平方米"
                }
                return retVal;
            }
        }

        /*球面多边形面积计算*/
        function SphericalPolygonAreaMeters2(points) {
            var totalAngle = 0;
            for (var i = 0; i < points.length; i++) {
                var j = (i + 1) % points.length;
                var k = (i + 2) % points.length;
                totalAngle += Angle(points[i], points[j], points[k]);
            }
            var planarTotalAngle = (points.length - 2) * 180.0;
            var sphericalExcess = totalAngle - planarTotalAngle;
            if (sphericalExcess > 420.0) {
                totalAngle = points.length * 360.0 - totalAngle;
                sphericalExcess = totalAngle - planarTotalAngle;
            } else if (sphericalExcess > 300.0 && sphericalExcess < 420.0) {
                sphericalExcess = Math.abs(360.0 - sphericalExcess);
            }
            return sphericalExcess * g_radiansPerDegree * g_earthRadiusMeters * g_earthRadiusMeters;
        }

        /*角度*/
        function Angle(p1, p2, p3) {
            var bearing21 = Bearing(p2, p1);
            var bearing23 = Bearing(p2, p3);
            var angle = bearing21 - bearing23;
            if (angle < 0) {
                angle += 360;
            }
            return angle;
        }


        /*方向*/
        function Bearing(from, to) {
            var lat1 = from[1] * g_radiansPerDegree;
            var lon1 = from[0] * g_radiansPerDegree;
            var lat2 = to[1] * g_radiansPerDegree;
            var lon2 = to[0] * g_radiansPerDegree;
            var angle = -Math.atan2(Math.sin(lon1 - lon2) * Math.cos(lat2), Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1) * Math.cos(lat2) * Math.cos(lon1 - lon2));
            if (angle < 0) {
                angle += Math.PI * 2.0;
            }
            angle = angle * g_degreesPerRadian;
            return angle;
        }

        /*平面多边形面积*/
        function PlanarPolygonAreaMeters2(points) {
            var a = 0;
            for (var i = 0; i < points.length; ++i) {
                var j = (i + 1) % points.length;
                var xi = points[i][0] * g_metersPerDegree * Math.cos(points[i][1] * g_radiansPerDegree);
                var yi = points[i][1] * g_metersPerDegree;
                var xj = points[j][0] * g_metersPerDegree * Math.cos(points[j][1] * g_radiansPerDegree);
                var yj = points[j][1] * g_metersPerDegree;
                a += xi * yj - xj * yi;
            }
            return Math.abs(a / 2);
        }

        // Calculate the length of the line
        var g_measureLength = 0;    //测量长度
        function getLength(sPoint, ePoint) {
            var geodesic = new Cesium.EllipsoidGeodesic();

            //var sPoint = entityLine.polyline.positions.getValue()[0];
            var sCartographic = Cesium.Cartographic.fromCartesian(sPoint);

            //var ePoint = entityLine.polyline.positions.getValue()[1];
            var eCartographic = Cesium.Cartographic.fromCartesian(ePoint);

            geodesic.setEndPoints(sCartographic, eCartographic);
            var lengthInMeters = Math.round(geodesic.surfaceDistance);

            return lengthInMeters;

        }

        //点击图上测量按钮
        function onClickMeasureBtn() {
            $('#divMeasureWnd').show();
            var nLeft = $(window).width() - $('#divMeasureWnd').width() - 5;
            var nTop = $(window).height() - $('#divMeasureWnd').height() * 3;
            $('#divMeasureWnd').css("left", nLeft + "px");
            $('#divMeasureWnd').css("top", nTop + "px");
            //$('#divMeasureWnd').prop("left", nLeft + "px");
        }
        /* bobo    添加内容    开始*/
        $('.bo_iimg1').on('click', function () {
            $('.bo_tabcon1').toggle('slow');
        });
        $('.bo_closebtn').on('click', function () {
            $('.bo_tabcon1').hide();
        });
        $('.bo_topicon').on('click', function () {
            $('.bo_lpopcon').toggle('slow');
        });
        /* bobo    添加内容    结束*/
    </script>
    <img id="ylimg" src="~/images/prm/11.gif" style="position: absolute; width: 5%; height:10%; z-index: 2" />
    <div class="layui-layer layui-layer-iframe layui-layer-border layer-mars-dialog2"
         id="divMeasureWnd" type="iframe" times="9" showtime="0" contype="object" style="z-index: 19891061;
                width: 340px; height: 160px; top: 175px; left: 0px; display: none;">
        <div class="layui-layer-title" style="cursor: move;" onmousedown="mouseDown(document.getElementById('divMeasureWnd'), event)"
             onmousemove="mouseMove(document.getElementById('divMeasureWnd'), event)" onmouseup="mouseUp(document.getElementById('divMeasureWnd'), event)">
            <i class="fa fa-share-alt"></i>图上量算
        </div>
        <div id="" class="layui-layer-content">
            <iframe scrolling="no" allowtransparency="true" id="frmMeasureView" name="frmMeasureView"
                    class="layui-layer-iframe" frameborder="0" src="~/measureView.html" style="height: 118px;"></iframe>
        </div>
        <span class="layui-layer-setwin">
            <a onclick="onCloseMeasureWnd();" class="layui-layer-ico layui-layer-close layui-layer-close1"
               style="background: url(../../Images/close1.png);"></a>
        </span><span class="layui-layer-resize">
        </span>
    </div>
    <div id="legend" style="display: none; background-color: rgba(255,255,255,0.1)">
        <ul>
            <li style="text-align:center;">
                雨量图例
            </li>
            <li>
                <span style="background-color: rgb(255,255,255);">&nbsp;&nbsp;&nbsp;</span><label>无降雨</label>
            </li>
            <li>
                <span style="background-color: rgb(165, 247, 140);">&nbsp;&nbsp;&nbsp;</span><label>0-10</label>
            </li>
            <li>
                <span style="background-color: rgb(49, 166, 0);">&nbsp;&nbsp;&nbsp;</span><label>10-25</label>
            </li>
            <li>
                <span style="background-color: rgb(99, 190, 255);">&nbsp;&nbsp;&nbsp;</span><label>25-50</label>
            </li>
            <li>
                <span style="background-color: rgb(0, 0, 255);">&nbsp;&nbsp;&nbsp;</span><label>50-100</label>
            </li>
            <li>
                <span style="background-color: rgb(255, 0, 255);">&nbsp;&nbsp;&nbsp;</span><label>100-250</label>
            </li>
            <li>
                <span style="background-color: rgb(255, 0, 0);">&nbsp;&nbsp;&nbsp;</span><label>大于250</label>
            </li>
        </ul>
    </div>

    <div id="legendynamaic" style="display: none; background-color: rgba(255,255,255,0.15)">
        <ul>
            <li><font style="vertical-align:central;">图例</font> </li>
            <li>
                <span style="background-color: rgb(254,6,4); width:30px;">&nbsp;&nbsp;&nbsp;</span><label>封冻</label>
            </li>
            <li>
                <span style="background-color: rgb(254, 0, 253);width:30px;">&nbsp;&nbsp;&nbsp;</span><label>不完全封冻</label>
            </li>
            <li>
                <span style="background-color: rgb(64, 63, 205);width:30px;">&nbsp;&nbsp;&nbsp;</span><label>流凌</label>
            </li>
            <li>
                <span style="background-color: rgb(254, 240, 230);width:30px;">&nbsp;&nbsp;&nbsp;</span><label>黄河</label>
            </li>
        </ul>
    </div>

    <div id="legendGrid" style="display: none; background-color: rgba(255,255,255,0.15)">
        <div style="width:380px;height:270px;border: 1px solid #E1E1E1;background:rgba(255,255,255,0.15)">
            <div style="text-align:center;font-size:large;width:380px;height:20px;"><div>凌情动态</div></div>
            <div style="width:380px;height:250px;">
                <div style="width:240px;height:250px;float:left;">
                    <div style="width:240px;height:20px;border: 1px solid #E1E1E1;">当前水情</div>
                    <div style="width:240px;height:230px;">
                        <table id="dgGridDynamic" style="width:240px; height:229px;overflow:auto;"></table>
                    </div>
                </div>
                <div style="width:140px;height:250px;float:right;">
                    <div style="width:139px;height:20px;border: 1px solid #E1E1E1;">封河情况</div>
                    <div id="divDTLQ" style="width:139px; border: 1px solid #E1E1E1; height:230px;"></div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>

