
@{
    ViewData["Title"] = "OLMapsIndex";
}

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>二维窗口</title>
    <script type="text/javascript" src="~/lib/jquery/dist/jquery-1.10.2.min.js"></script>
    <script src="~/lib/ol-v5.3.0/build/ol.js"></script>
    <link rel="stylesheet" href="~/lib/ol-v5.3.0/css/ol.css" type="text/css" />
    <script type="text/javascript" src="~/lib/kriging.js-master/kriging.js"></script>
    <script type="text/javascript" src="~/lib/turf5.1.6/turf.min.js"></script>
</head>
<body>
    <div id="map" style="width:100%;height:100%;"></div>
    <script type="text/javascript">
        //let params = {
        //    mapCenter: [114.360456, 30.538622],
        //    maxValue: 100,
        //    krigingModel: 'exponential',//model还可选'gaussian','spherical'
        //    krigingSigma2: 0,
        //    krigingAlpha: 100,
        //    canvasAlpha: 0.75,//canvas图层透明度
        //    colors: ["#006837", "#1a9850", "#66bd63", "#a6d96a", "#d9ef8b", "#ffffbf",
        //        "#fee08b", "#fdae61", "#f46d43", "#d73027", "#a50026"],
        //};
        //let baseLayer = new ol.layer.Tile({
        //    title: "base",
        //    source: new ol.source.OSM()
        //});
        //let map = new ol.Map({
        //    target: 'map',
        //    layers: [baseLayer],
        //    view: new ol.View({
        //        center: params.mapCenter,
        //        projection: 'EPSG:4326',
        //        zoom: 4
        //    })
        //});
        //let WFSVectorSource = new ol.source.Vector();
        //let WFSVectorLayer = new ol.layer.Vector(
        //    {
        //        source: WFSVectorSource,
        //    });
        //map.addLayer(WFSVectorLayer);

        ////添加选择和框选控件，按住Ctrl/⌘键，使用鼠标框选采样点
        //let select = new ol.interaction.Select();
        //map.addInteraction(select);
        //let dragBox = new ol.interaction.DragBox({
        //    condition: ol.events.condition.platformModifierKeyOnly
        //});
        //map.addInteraction(dragBox);

        ////创建10个位置随机、属性值随机的特征点
        //for (let i = 0; i < 100; i++) {
        //    let feature = new ol.Feature({
        //        geometry: new ol.geom.Point([params.mapCenter[0] + Math.random() * 3 - 1.5, params.mapCenter[1] + Math.random() * 3 - 1.5]), value: Math.round(Math.random() * params.maxValue)
        //    });
        //    feature.setStyle(new ol.style.Style({
        //        image: new ol.style.Circle({
        //            radius: 6,
        //            fill: new ol.style.Fill({ color: "#00F" })
        //        })
        //    }));
        //    WFSVectorSource.addFeature(feature);
        //}

        ////设置框选事件
        //let selectedFeatures = select.getFeatures();
        //dragBox.on('boxend', () => {
        //    let extent = dragBox.getGeometry().getExtent();
        //    WFSVectorSource.forEachFeatureIntersectingExtent(extent, (feature) => {
        //        selectedFeatures.push(feature);
        //    });
        //    drawKriging(extent);
        //});
        //dragBox.on('boxstart', () => {
        //    selectedFeatures.clear();
        //});

        ////绘制kriging插值图
        //let canvasLayer = null;
        //const drawKriging = (extent) => {
        //    let values = [], lngs = [], lats = [];
        //    selectedFeatures.forEach(feature => {
        //        values.push(feature.values_.value);
        //        lngs.push(feature.values_.geometry.flatCoordinates[0]);
        //        lats.push(feature.values_.geometry.flatCoordinates[1]);
        //    });
        //    if (values.length > 3) {
        //        let variogram = kriging.train(values, lngs, lats,
        //            params.krigingModel, params.krigingSigma2, params.krigingAlpha);

        //        let polygons = [];
        //        polygons.push([[extent[0], extent[1]], [extent[0], extent[3]],
        //        [extent[2], extent[3]], [extent[2], extent[1]]]);
        //        console.log(polygons);
        //        let grid = kriging.grid(polygons, variogram, (extent[2] - extent[0]) / 200);

        //        let dragboxExtent = extent;
        //        //移除已有图层
        //        if (canvasLayer !== null) {
        //            map.removeLayer(canvasLayer);
        //        }
        //        //创建新图层
        //        canvasLayer = new ol.layer.Image({
        //            source: new ol.source.ImageCanvas({
        //                canvasFunction: (extent, resolution, pixelRatio, size, projection) => {
        //                    let canvas = document.createElement('canvas');
        //                    canvas.width = size[0];
        //                    canvas.height = size[1];
        //                    canvas.style.display = 'block';
        //                    //设置canvas透明度
        //                    canvas.getContext('2d').globalAlpha = params.canvasAlpha;

        //                    //使用分层设色渲染
        //                    kriging.plot(canvas, grid,
        //                        [extent[0], extent[2]], [extent[1], extent[3]], params.colors);

        //                    return canvas;
        //                },
        //                projection: 'EPSG:4326'
        //            })
        //        })
        //        //向map添加图层
        //        map.addLayer(canvasLayer);
        //    } else {
        //        alert("有效样点个数不足，无法插值");
        //    }
        //}
        ////首次加载，自动渲染一次差值图
        //let extent = [params.mapCenter[0] - 1.5, params.mapCenter[1] - 1.5, params.mapCenter[0] + 1.5, params.mapCenter[1] + 1.5];
        //WFSVectorSource.forEachFeatureIntersectingExtent(extent, (feature) => {
        //    selectedFeatures.push(feature);
        //});
        //drawKriging(extent);
    </script>
    <script type="text/javascript">
        let params = {
            mapCenter: [113.65113410245,34.76626768096],
            maxValue: 100,
            krigingModel: 'exponential',//model还可选'gaussian','spherical'
            krigingSigma2: 0,
            krigingAlpha: 100,
            canvasAlpha: 0.5,//canvas图层透明度
            colors: ["#006837", "#1a9850", "#66bd63", "#a6d96a", "#d9ef8b", "#ffffbf",
                "#fee08b", "#fdae61", "#f46d43", "#d73027", "#a50026"],
        };
        let baseLayer = new ol.layer.Tile({
            title: "base",
            source: new ol.source.OSM()
        });
        let map = new ol.Map({
            target: 'map',
            layers: [baseLayer],
            view: new ol.View({
                center: params.mapCenter,
                projection: 'EPSG:4326',
                zoom: 6
            })
        });
        let WFSVectorSource = new ol.source.Vector();
        let WFSVectorLayer = new ol.layer.Vector(
            {
                source: WFSVectorSource,
            });
        map.addLayer(WFSVectorLayer);

        //添加选择和框选控件，按住Ctrl/⌘键，使用鼠标框选采样点
        let select = new ol.interaction.Select();
        map.addInteraction(select);
        let dragBox = new ol.interaction.DragBox({
            condition: ol.events.condition.platformModifierKeyOnly
        });
        map.addInteraction(dragBox);

        InitTree();

        function InitTree() {
            $.getJSON("/StationInfo/Details/GetStationList", { "stcds": "" }, reInitTree);
        }
        var g_stationData;

        //首次加载，自动渲染一次差值图
        let extent = [108.039249104705, 35.6496999823203, 112.677459145649, 40.5969022844123];
        let feature;
        function reInitTree(data) {
            g_stationData = data;

            for (let i = 0; i < 100; i++) {
                feature = new ol.Feature({
                    geometry: new ol.geom.Point([g_stationData[i].LGTD, g_stationData[i].LTTD]), value: Math.round(Math.random() * params.maxValue)
                });
                feature.setStyle(new ol.style.Style({
                    image: new ol.style.Circle({
                        radius: 6,
                        fill: new ol.style.Fill({ color: "#00F" })
                    })
                }));
                WFSVectorSource.addFeature(feature);
            }

            WFSVectorSource.forEachFeatureIntersectingExtent(extent, (feature) => {
                selectedFeatures.push(feature);
            });
            drawKriging(extent);
        }

        //设置框选事件
        let selectedFeatures = select.getFeatures();
        dragBox.on('boxend', () => {
            let extent = dragBox.getGeometry().getExtent();
            WFSVectorSource.forEachFeatureIntersectingExtent(extent, (feature) => {
                selectedFeatures.push(feature);
            });
            drawKriging(extent);
        });
        dragBox.on('boxstart', () => {
            selectedFeatures.clear();
        });

        //绘制kriging插值图
        let canvasLayer = null;
        const drawKriging = (extent) => {
            let values = [], lngs = [], lats = [];
            selectedFeatures.forEach(feature => {
                values.push(feature.values_.value);
                lngs.push(feature.values_.geometry.flatCoordinates[0]);
                lats.push(feature.values_.geometry.flatCoordinates[1]);
            });
            if (values.length > 3) {
                let variogram = kriging.train(values, lngs, lats,
                    params.krigingModel, params.krigingSigma2, params.krigingAlpha);

                let polygons = [];
                polygons.push([[extent[0], extent[1]], [extent[0], extent[3]],
                [extent[2], extent[3]], [extent[2], extent[1]]]);
                console.log(polygons);
                let grid = kriging.grid(polygons, variogram, (extent[2] - extent[0]) / 200);

                let dragboxExtent = extent;
                //移除已有图层
                if (canvasLayer !== null) {
                    map.removeLayer(canvasLayer);
                }
                //创建新图层
                canvasLayer = new ol.layer.Image({
                    source: new ol.source.ImageCanvas({
                        canvasFunction: (extent, resolution, pixelRatio, size, projection) => {
                            let canvas = document.createElement('canvas');
                            canvas.width = size[0];
                            canvas.height = size[1];
                            console.log(size[0]);
                            console.log(size[1]);
                            canvas.style.display = 'block';
                            //设置canvas透明度
                            canvas.getContext('2d').globalAlpha = params.canvasAlpha;

                            //使用分层设色渲染
                            kriging.plot(canvas, grid,
                                [extent[0], extent[2]], [extent[1], extent[3]], params.colors);
                            debugger;
                            return canvas;
                        },
                        projection: 'EPSG:4326'
                    })
                })
                //向map添加图层
                map.addLayer(canvasLayer);
            } else {
                alert("有效样点个数不足，无法插值");
            }
        }
        
    </script>
    <script type="text/javascript">
        //var view = new ol.View({
        //    // 设置郑州为地图中心
        //    //center: ol.proj.transform([113.65113410245, 34.76626768096], "EPSG:4326", "EPSG:3857"),
        //    center: [113.65113410245, 34.76626768096],
        //    projection: 'EPSG:4326',
        //    zoom: 6
        //});
        ////var osm=new ol.layer.Tile({source: new ol.source.OSM()});
        //// map
        //var map = new ol.Map({
        //    controls: ol.control.defaults({
        //        attributionOptions: ({
        //            collapsible: false
        //        })
        //    }),
        //    layers: [
        //        getTdtLayer("vec_w"),
        //        getTdtLayer("cva_w"),

        //    ],
        //    view: view,
        //    target: 'map'
        //});
        
        //function getTdtLayer(lyr) {
        //    var urls = [];
        //    for (var i = 0; i < 8; i++) {
        //        urls.push("http://t" + i + ".tianditu.com/DataServer?T=" + lyr + "&X={x}&Y={y}&L={z}&tk=3b6e1ded5e34e4a985ce9167106c62a0")
        //    }
        //    var layer = new ol.layer.Tile({
        //        source: new ol.source.XYZ({
        //            urls: urls
        //        })
        //    });
        //    return layer;
        //}

        ////创建站点
        //InitTree();

        //function InitTree() {
        //    $.getJSON("/StationInfo/Details/GetStationList", { "stcds": "" }, reInitTree);
        //}

        //function reInitTree(data) {
        //    var features = new Array();
        //    for (var i = 0; i < data.length;i++) {
        //        var coordinates = [data[i].LGTD, data[i].LTTD];
        //        //var coordinates = ol.proj.transform([data[i].LGTD, data[i].LTTD], "EPSG:4326", "EPSG:3857")
        //        features.push(new ol.Feature(
        //            {
        //                geometry: new ol.geom.Point(coordinates),
        //                stcd: data[i].STCD,
        //                stnm: data[i].STNM,
        //                sttp: data[i].STTP
        //            }
        //        ));
        //    }

        //    //矢量要素数据源
        //    var source = new ol.source.Vector({
        //        features: features
        //    });

        //    //聚合标注数据源
        //    var clusterSource = new ol.source.Cluster({
        //        distance: 40,               //聚合的距离参数，即当标注间距离小于此值时进行聚合，单位是像素
        //        source: source              //聚合的数据源，即矢量要素数据源对象
        //    });

        //    //加载聚合标注的矢量图层
        //    var styleCache = {};                    //用于保存特定数量的聚合群的要素样式

        //    var clusters = new ol.layer.Vector({
        //        source: clusterSource,
        //        opacity:1,    //透明度
        //        style: function (feature, resolution) {
        //            var size = feature.get('features').length;          //获取该要素所在聚合群的要素数量
        //            var style = styleCache[size];
        //            if (size == 1) {
        //                var sttp = feature.get('features')[0].get('sttp');
        //                var imgUrl = getHomeUrl() + "/images/prm/sw.gif";
        //                if (sttp == 'ZZ') {
        //                    imgUrl = getHomeUrl() + "/images/prm/sw.gif";
        //                }
        //                else if (sttp == 'ZQ') {
        //                    imgUrl = getHomeUrl() + "/images/prm/sw.gif";
        //                }
        //                else if (sttp == 'PP') {
        //                    imgUrl = getHomeUrl() + "/images/prm/rain_new.png";
        //                }
        //                style = [
        //                    new ol.style.Style({
        //                        image: new ol.style.Icon({
        //                            anchor: [0.5, 1.6],              //锚点
        //                            anchorOrigin: 'top-right',
        //                            src: imgUrl
        //                        }),
        //                        text: new ol.style.Text({
        //                            text: feature.get('features')[0].get('stnm'),
        //                            fill: new ol.style.Fill({
        //                                color: '#fff'
        //                            }),
        //                            backgroundFill: new ol.style.Fill({
        //                                color: '#3399CC'
        //                            })
        //                        })
        //                    })
        //                ];
        //            }
        //            else {
        //                if (!style) {
        //                    style = [
        //                        new ol.style.Style({
        //                            image: new ol.style.Circle({
        //                                radius: 10,
        //                                stroke: new ol.style.Stroke({
        //                                    color: '#fff'
        //                                }),
        //                                fill: new ol.style.Fill({
        //                                    color: '#3399CC'
        //                                })
        //                            }),
        //                            text: new ol.style.Text({
        //                                text: size.toString(),
        //                                fill: new ol.style.Fill({
        //                                    color: '#fff'
        //                                })
        //                            })
        //                        })
        //                    ];

        //                    styleCache[size] = style;
        //                }
        //            }
        //            return style;
        //        }
        //    });
        //    map.addLayer(clusters);
        //}

        //function getHomeUrl() {
        //    var strFullPath = window.document.location.href;
        //    var strPath = window.document.location.pathname;
        //    var pos = strFullPath.indexOf(strPath);
        //    var prePath = strFullPath.substring(0, pos);
        //    var postPath = strPath.substring(0, strPath.substr(1).indexOf('/') + 1);

        //    return prePath;
        //}
    </script>
</body>
</html>